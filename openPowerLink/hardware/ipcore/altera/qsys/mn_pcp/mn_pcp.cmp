	component mn_pcp is
		port (
			clk50_clk                                : in  std_logic                     := 'X';             -- clk
			rst_clk50_reset_n                        : in  std_logic                     := 'X';             -- reset_n
			clk100_clk                               : in  std_logic                     := 'X';             -- clk
			rst_clk100_reset_n                       : in  std_logic                     := 'X';             -- reset_n
			benchmark_pio_external_connection_export : out std_logic_vector(7 downto 0);                     -- export
			slow_bridge_waitrequest                  : in  std_logic                     := 'X';             -- waitrequest
			slow_bridge_readdata                     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			slow_bridge_readdatavalid                : in  std_logic                     := 'X';             -- readdatavalid
			slow_bridge_burstcount                   : out std_logic_vector(0 downto 0);                     -- burstcount
			slow_bridge_writedata                    : out std_logic_vector(31 downto 0);                    -- writedata
			slow_bridge_address                      : out std_logic_vector(18 downto 0);                    -- address
			slow_bridge_write                        : out std_logic;                                        -- write
			slow_bridge_read                         : out std_logic;                                        -- read
			slow_bridge_byteenable                   : out std_logic_vector(3 downto 0);                     -- byteenable
			slow_bridge_debugaccess                  : out std_logic;                                        -- debugaccess
			cpu_bridge_waitrequest                   : in  std_logic                     := 'X';             -- waitrequest
			cpu_bridge_readdata                      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			cpu_bridge_readdatavalid                 : in  std_logic                     := 'X';             -- readdatavalid
			cpu_bridge_burstcount                    : out std_logic_vector(0 downto 0);                     -- burstcount
			cpu_bridge_writedata                     : out std_logic_vector(31 downto 0);                    -- writedata
			cpu_bridge_address                       : out std_logic_vector(21 downto 0);                    -- address
			cpu_bridge_write                         : out std_logic;                                        -- write
			cpu_bridge_read                          : out std_logic;                                        -- read
			cpu_bridge_byteenable                    : out std_logic_vector(3 downto 0);                     -- byteenable
			cpu_bridge_debugaccess                   : out std_logic;                                        -- debugaccess
			sync_irq_irq                             : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- irq
			mac_irq_irq                              : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- irq
			flash_bridge_waitrequest                 : in  std_logic                     := 'X';             -- waitrequest
			flash_bridge_readdata                    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			flash_bridge_readdatavalid               : in  std_logic                     := 'X';             -- readdatavalid
			flash_bridge_burstcount                  : out std_logic_vector(0 downto 0);                     -- burstcount
			flash_bridge_writedata                   : out std_logic_vector(31 downto 0);                    -- writedata
			flash_bridge_address                     : out std_logic_vector(21 downto 0);                    -- address
			flash_bridge_write                       : out std_logic;                                        -- write
			flash_bridge_read                        : out std_logic;                                        -- read
			flash_bridge_byteenable                  : out std_logic_vector(3 downto 0);                     -- byteenable
			flash_bridge_debugaccess                 : out std_logic;                                        -- debugaccess
			gp_irq_irq                               : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- irq
			cpu_resetrequest_resetrequest            : in  std_logic                     := 'X';             -- resetrequest
			cpu_resetrequest_resettaken              : out std_logic;                                        -- resettaken
			jtag_reset_reset                         : out std_logic;                                        -- reset
			powerlink_led_export                     : out std_logic_vector(1 downto 0)                      -- export
		);
	end component mn_pcp;

