// soc_system_host_0_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2018.02.08.18:46:11

`timescale 1 ps / 1 ps
module soc_system_host_0_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_50_clk_clk,                                                      //                                                    clk_50_clk.clk
		input  wire        dipsw_pio_reset_reset_bridge_in_reset_reset,                         //                         dipsw_pio_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        lw_bridge_reset_reset_bridge_in_reset_reset,                         //                         lw_bridge_reset_reset_bridge_in_reset.reset
		output wire [1:0]  button_pio_s1_address,                                               //                                                 button_pio_s1.address
		output wire        button_pio_s1_write,                                                 //                                                              .write
		input  wire [31:0] button_pio_s1_readdata,                                              //                                                              .readdata
		output wire [31:0] button_pio_s1_writedata,                                             //                                                              .writedata
		output wire        button_pio_s1_chipselect,                                            //                                                              .chipselect
		output wire [1:0]  dipsw_pio_s1_address,                                                //                                                  dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                                  //                                                              .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                              //                                                              .writedata
		output wire        dipsw_pio_s1_chipselect,                                             //                                                              .chipselect
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                               //                                 jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                 //                                                              .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                  //                                                              .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                              //                                                              .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                             //                                                              .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                           //                                                              .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                            //                                                              .chipselect
		output wire [17:0] lw_bridge_s0_address,                                                //                                                  lw_bridge_s0.address
		output wire        lw_bridge_s0_write,                                                  //                                                              .write
		output wire        lw_bridge_s0_read,                                                   //                                                              .read
		input  wire [31:0] lw_bridge_s0_readdata,                                               //                                                              .readdata
		output wire [31:0] lw_bridge_s0_writedata,                                              //                                                              .writedata
		output wire [0:0]  lw_bridge_s0_burstcount,                                             //                                                              .burstcount
		output wire [3:0]  lw_bridge_s0_byteenable,                                             //                                                              .byteenable
		input  wire        lw_bridge_s0_readdatavalid,                                          //                                                              .readdatavalid
		input  wire        lw_bridge_s0_waitrequest,                                            //                                                              .waitrequest
		output wire        lw_bridge_s0_debugaccess,                                            //                                                              .debugaccess
		output wire [2:0]  timer_0_s1_address,                                                  //                                                    timer_0_s1.address
		output wire        timer_0_s1_write,                                                    //                                                              .write
		input  wire [15:0] timer_0_s1_readdata,                                                 //                                                              .readdata
		output wire [15:0] timer_0_s1_writedata,                                                //                                                              .writedata
		output wire        timer_0_s1_chipselect                                                //                                                              .chipselect
	);

	wire          dipsw_pio_s1_agent_m0_waitrequest;                                 // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                                  // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                   // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire   [20:0] dipsw_pio_s1_agent_m0_address;                                     // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire          dipsw_pio_s1_agent_m0_write;                                       // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire          dipsw_pio_s1_agent_m0_lock;                                        // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire          dipsw_pio_s1_agent_m0_read;                                        // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                    // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                               // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_debugaccess;                                 // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                                  // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                          // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rf_source_valid;                                // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                        // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire  [116:0] dipsw_pio_s1_agent_rf_source_data;                                 // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                                // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                       // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                             // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                     // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire  [116:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                              // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                             // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                           // dipsw_pio_s1_agent:rdata_fifo_src_valid -> dipsw_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                            // dipsw_pio_s1_agent:rdata_fifo_src_data -> dipsw_pio_s1_agent_rdata_fifo:in_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                           // dipsw_pio_s1_agent_rdata_fifo:in_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire          dipsw_pio_s1_agent_rdata_fifo_out_valid;                           // dipsw_pio_s1_agent_rdata_fifo:out_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_out_data;                            // dipsw_pio_s1_agent_rdata_fifo:out_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          dipsw_pio_s1_agent_rdata_fifo_out_ready;                           // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> dipsw_pio_s1_agent_rdata_fifo:out_ready
	wire          button_pio_s1_agent_m0_waitrequest;                                // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                 // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                  // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire   [20:0] button_pio_s1_agent_m0_address;                                    // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire          button_pio_s1_agent_m0_write;                                      // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire          button_pio_s1_agent_m0_lock;                                       // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire          button_pio_s1_agent_m0_read;                                       // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                   // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_readdatavalid;                              // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_debugaccess;                                // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                 // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_rf_source_endofpacket;                         // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rf_source_valid;                               // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire          button_pio_s1_agent_rf_source_startofpacket;                       // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire  [116:0] button_pio_s1_agent_rf_source_data;                                // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                               // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                      // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                            // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                    // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire  [116:0] button_pio_s1_agent_rsp_fifo_out_data;                             // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                            // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                          // button_pio_s1_agent:rdata_fifo_src_valid -> button_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                           // button_pio_s1_agent:rdata_fifo_src_data -> button_pio_s1_agent_rdata_fifo:in_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                          // button_pio_s1_agent_rdata_fifo:in_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire          button_pio_s1_agent_rdata_fifo_out_valid;                          // button_pio_s1_agent_rdata_fifo:out_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_out_data;                           // button_pio_s1_agent_rdata_fifo:out_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          button_pio_s1_agent_rdata_fifo_out_ready;                          // button_pio_s1_agent:rdata_fifo_sink_ready -> button_pio_s1_agent_rdata_fifo:out_ready
	wire          lw_bridge_s0_agent_m0_waitrequest;                                 // lw_bridge_s0_translator:uav_waitrequest -> lw_bridge_s0_agent:m0_waitrequest
	wire    [2:0] lw_bridge_s0_agent_m0_burstcount;                                  // lw_bridge_s0_agent:m0_burstcount -> lw_bridge_s0_translator:uav_burstcount
	wire   [31:0] lw_bridge_s0_agent_m0_writedata;                                   // lw_bridge_s0_agent:m0_writedata -> lw_bridge_s0_translator:uav_writedata
	wire   [20:0] lw_bridge_s0_agent_m0_address;                                     // lw_bridge_s0_agent:m0_address -> lw_bridge_s0_translator:uav_address
	wire          lw_bridge_s0_agent_m0_write;                                       // lw_bridge_s0_agent:m0_write -> lw_bridge_s0_translator:uav_write
	wire          lw_bridge_s0_agent_m0_lock;                                        // lw_bridge_s0_agent:m0_lock -> lw_bridge_s0_translator:uav_lock
	wire          lw_bridge_s0_agent_m0_read;                                        // lw_bridge_s0_agent:m0_read -> lw_bridge_s0_translator:uav_read
	wire   [31:0] lw_bridge_s0_agent_m0_readdata;                                    // lw_bridge_s0_translator:uav_readdata -> lw_bridge_s0_agent:m0_readdata
	wire          lw_bridge_s0_agent_m0_readdatavalid;                               // lw_bridge_s0_translator:uav_readdatavalid -> lw_bridge_s0_agent:m0_readdatavalid
	wire          lw_bridge_s0_agent_m0_debugaccess;                                 // lw_bridge_s0_agent:m0_debugaccess -> lw_bridge_s0_translator:uav_debugaccess
	wire    [3:0] lw_bridge_s0_agent_m0_byteenable;                                  // lw_bridge_s0_agent:m0_byteenable -> lw_bridge_s0_translator:uav_byteenable
	wire          lw_bridge_s0_agent_rf_source_endofpacket;                          // lw_bridge_s0_agent:rf_source_endofpacket -> lw_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          lw_bridge_s0_agent_rf_source_valid;                                // lw_bridge_s0_agent:rf_source_valid -> lw_bridge_s0_agent_rsp_fifo:in_valid
	wire          lw_bridge_s0_agent_rf_source_startofpacket;                        // lw_bridge_s0_agent:rf_source_startofpacket -> lw_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire  [116:0] lw_bridge_s0_agent_rf_source_data;                                 // lw_bridge_s0_agent:rf_source_data -> lw_bridge_s0_agent_rsp_fifo:in_data
	wire          lw_bridge_s0_agent_rf_source_ready;                                // lw_bridge_s0_agent_rsp_fifo:in_ready -> lw_bridge_s0_agent:rf_source_ready
	wire          lw_bridge_s0_agent_rsp_fifo_out_endofpacket;                       // lw_bridge_s0_agent_rsp_fifo:out_endofpacket -> lw_bridge_s0_agent:rf_sink_endofpacket
	wire          lw_bridge_s0_agent_rsp_fifo_out_valid;                             // lw_bridge_s0_agent_rsp_fifo:out_valid -> lw_bridge_s0_agent:rf_sink_valid
	wire          lw_bridge_s0_agent_rsp_fifo_out_startofpacket;                     // lw_bridge_s0_agent_rsp_fifo:out_startofpacket -> lw_bridge_s0_agent:rf_sink_startofpacket
	wire  [116:0] lw_bridge_s0_agent_rsp_fifo_out_data;                              // lw_bridge_s0_agent_rsp_fifo:out_data -> lw_bridge_s0_agent:rf_sink_data
	wire          lw_bridge_s0_agent_rsp_fifo_out_ready;                             // lw_bridge_s0_agent:rf_sink_ready -> lw_bridge_s0_agent_rsp_fifo:out_ready
	wire          lw_bridge_s0_agent_rdata_fifo_src_valid;                           // lw_bridge_s0_agent:rdata_fifo_src_valid -> lw_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] lw_bridge_s0_agent_rdata_fifo_src_data;                            // lw_bridge_s0_agent:rdata_fifo_src_data -> lw_bridge_s0_agent_rdata_fifo:in_data
	wire          lw_bridge_s0_agent_rdata_fifo_src_ready;                           // lw_bridge_s0_agent_rdata_fifo:in_ready -> lw_bridge_s0_agent:rdata_fifo_src_ready
	wire          lw_bridge_s0_agent_rdata_fifo_out_valid;                           // lw_bridge_s0_agent_rdata_fifo:out_valid -> lw_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] lw_bridge_s0_agent_rdata_fifo_out_data;                            // lw_bridge_s0_agent_rdata_fifo:out_data -> lw_bridge_s0_agent:rdata_fifo_sink_data
	wire          lw_bridge_s0_agent_rdata_fifo_out_ready;                           // lw_bridge_s0_agent:rdata_fifo_sink_ready -> lw_bridge_s0_agent_rdata_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                 // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                  // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire   [20:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                      // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                   // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;              // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                 // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;         // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [116:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;               // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;      // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [116:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;            // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;          // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;          // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          timer_0_s1_agent_m0_waitrequest;                                   // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                    // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                     // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire   [20:0] timer_0_s1_agent_m0_address;                                       // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire          timer_0_s1_agent_m0_write;                                         // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire          timer_0_s1_agent_m0_lock;                                          // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire          timer_0_s1_agent_m0_read;                                          // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                      // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_readdatavalid;                                 // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_debugaccess;                                   // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                    // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_rf_source_endofpacket;                            // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rf_source_valid;                                  // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire          timer_0_s1_agent_rf_source_startofpacket;                          // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [116:0] timer_0_s1_agent_rf_source_data;                                   // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                  // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                         // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                               // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                       // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire  [116:0] timer_0_s1_agent_rsp_fifo_out_data;                                // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                               // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                             // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                              // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                             // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                             // timer_0_s1_agent_rdata_fifo:out_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                              // timer_0_s1_agent_rdata_fifo:out_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                             // timer_0_s1_agent:rdata_fifo_sink_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                      // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;              // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                       // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                      // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                 // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                       // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;               // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                        // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                       // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          dipsw_pio_s1_agent_rp_endofpacket;                                 // dipsw_pio_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                       // dipsw_pio_s1_agent:rp_valid -> router_002:sink_valid
	wire          dipsw_pio_s1_agent_rp_startofpacket;                               // dipsw_pio_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [115:0] dipsw_pio_s1_agent_rp_data;                                        // dipsw_pio_s1_agent:rp_data -> router_002:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                       // router_002:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          router_002_src_endofpacket;                                        // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                              // router_002:src_valid -> rsp_demux:sink_valid
	wire          router_002_src_startofpacket;                                      // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [115:0] router_002_src_data;                                               // router_002:src_data -> rsp_demux:sink_data
	wire    [4:0] router_002_src_channel;                                            // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_ready;                                              // rsp_demux:sink_ready -> router_002:src_ready
	wire          button_pio_s1_agent_rp_endofpacket;                                // button_pio_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                      // button_pio_s1_agent:rp_valid -> router_003:sink_valid
	wire          button_pio_s1_agent_rp_startofpacket;                              // button_pio_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [115:0] button_pio_s1_agent_rp_data;                                       // button_pio_s1_agent:rp_data -> router_003:sink_data
	wire          button_pio_s1_agent_rp_ready;                                      // router_003:sink_ready -> button_pio_s1_agent:rp_ready
	wire          router_003_src_endofpacket;                                        // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                              // router_003:src_valid -> rsp_demux_001:sink_valid
	wire          router_003_src_startofpacket;                                      // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [115:0] router_003_src_data;                                               // router_003:src_data -> rsp_demux_001:sink_data
	wire    [4:0] router_003_src_channel;                                            // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_ready;                                              // rsp_demux_001:sink_ready -> router_003:src_ready
	wire          lw_bridge_s0_agent_rp_endofpacket;                                 // lw_bridge_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          lw_bridge_s0_agent_rp_valid;                                       // lw_bridge_s0_agent:rp_valid -> router_004:sink_valid
	wire          lw_bridge_s0_agent_rp_startofpacket;                               // lw_bridge_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [115:0] lw_bridge_s0_agent_rp_data;                                        // lw_bridge_s0_agent:rp_data -> router_004:sink_data
	wire          lw_bridge_s0_agent_rp_ready;                                       // router_004:sink_ready -> lw_bridge_s0_agent:rp_ready
	wire          router_004_src_endofpacket;                                        // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                              // router_004:src_valid -> rsp_demux_002:sink_valid
	wire          router_004_src_startofpacket;                                      // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [115:0] router_004_src_data;                                               // router_004:src_data -> rsp_demux_002:sink_data
	wire    [4:0] router_004_src_channel;                                            // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_ready;                                              // rsp_demux_002:sink_ready -> router_004:src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                      // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;              // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [115:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                       // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                      // router_005:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          router_005_src_endofpacket;                                        // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_005_src_valid;                                              // router_005:src_valid -> rsp_demux_003:sink_valid
	wire          router_005_src_startofpacket;                                      // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [115:0] router_005_src_data;                                               // router_005:src_data -> rsp_demux_003:sink_data
	wire    [4:0] router_005_src_channel;                                            // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_ready;                                              // rsp_demux_003:sink_ready -> router_005:src_ready
	wire          timer_0_s1_agent_rp_endofpacket;                                   // timer_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                         // timer_0_s1_agent:rp_valid -> router_006:sink_valid
	wire          timer_0_s1_agent_rp_startofpacket;                                 // timer_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [115:0] timer_0_s1_agent_rp_data;                                          // timer_0_s1_agent:rp_data -> router_006:sink_data
	wire          timer_0_s1_agent_rp_ready;                                         // router_006:sink_ready -> timer_0_s1_agent:rp_ready
	wire          router_006_src_endofpacket;                                        // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_006_src_valid;                                              // router_006:src_valid -> rsp_demux_004:sink_valid
	wire          router_006_src_startofpacket;                                      // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [115:0] router_006_src_data;                                               // router_006:src_data -> rsp_demux_004:sink_data
	wire    [4:0] router_006_src_channel;                                            // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_ready;                                              // rsp_demux_004:sink_ready -> router_006:src_ready
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire  [115:0] router_src_data;                                                   // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire    [4:0] router_src_channel;                                                // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_ready;                                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;            // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                   // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [4:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                  // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire  [115:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire    [4:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;            // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire    [4:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                  // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire  [115:0] router_001_src_data;                                               // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire    [4:0] router_001_src_channel;                                            // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_ready;                                              // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;            // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                   // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire    [4:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                  // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire          rsp_mux_001_src_endofpacket;                                       // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          rsp_mux_001_src_valid;                                             // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire          rsp_mux_001_src_startofpacket;                                     // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire  [115:0] rsp_mux_001_src_data;                                              // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire    [4:0] rsp_mux_001_src_channel;                                           // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_ready;                                             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire    [4:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                  // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> dipsw_pio_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> dipsw_pio_s1_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> dipsw_pio_s1_burst_adapter:sink0_startofpacket
	wire  [115:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> dipsw_pio_s1_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> dipsw_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                 // dipsw_pio_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          dipsw_pio_s1_burst_adapter_source0_endofpacket;                    // dipsw_pio_s1_burst_adapter:source0_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_valid;                          // dipsw_pio_s1_burst_adapter:source0_valid -> dipsw_pio_s1_agent:cp_valid
	wire          dipsw_pio_s1_burst_adapter_source0_startofpacket;                  // dipsw_pio_s1_burst_adapter:source0_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire  [115:0] dipsw_pio_s1_burst_adapter_source0_data;                           // dipsw_pio_s1_burst_adapter:source0_data -> dipsw_pio_s1_agent:cp_data
	wire          dipsw_pio_s1_burst_adapter_source0_ready;                          // dipsw_pio_s1_agent:cp_ready -> dipsw_pio_s1_burst_adapter:source0_ready
	wire    [4:0] dipsw_pio_s1_burst_adapter_source0_channel;                        // dipsw_pio_s1_burst_adapter:source0_channel -> dipsw_pio_s1_agent:cp_channel
	wire          cmd_mux_001_src_endofpacket;                                       // cmd_mux_001:src_endofpacket -> button_pio_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                             // cmd_mux_001:src_valid -> button_pio_s1_burst_adapter:sink0_valid
	wire          cmd_mux_001_src_startofpacket;                                     // cmd_mux_001:src_startofpacket -> button_pio_s1_burst_adapter:sink0_startofpacket
	wire  [115:0] cmd_mux_001_src_data;                                              // cmd_mux_001:src_data -> button_pio_s1_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_001_src_channel;                                           // cmd_mux_001:src_channel -> button_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_ready;                                             // button_pio_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire          button_pio_s1_burst_adapter_source0_endofpacket;                   // button_pio_s1_burst_adapter:source0_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          button_pio_s1_burst_adapter_source0_valid;                         // button_pio_s1_burst_adapter:source0_valid -> button_pio_s1_agent:cp_valid
	wire          button_pio_s1_burst_adapter_source0_startofpacket;                 // button_pio_s1_burst_adapter:source0_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire  [115:0] button_pio_s1_burst_adapter_source0_data;                          // button_pio_s1_burst_adapter:source0_data -> button_pio_s1_agent:cp_data
	wire          button_pio_s1_burst_adapter_source0_ready;                         // button_pio_s1_agent:cp_ready -> button_pio_s1_burst_adapter:source0_ready
	wire    [4:0] button_pio_s1_burst_adapter_source0_channel;                       // button_pio_s1_burst_adapter:source0_channel -> button_pio_s1_agent:cp_channel
	wire          cmd_mux_002_src_endofpacket;                                       // cmd_mux_002:src_endofpacket -> lw_bridge_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                             // cmd_mux_002:src_valid -> lw_bridge_s0_burst_adapter:sink0_valid
	wire          cmd_mux_002_src_startofpacket;                                     // cmd_mux_002:src_startofpacket -> lw_bridge_s0_burst_adapter:sink0_startofpacket
	wire  [115:0] cmd_mux_002_src_data;                                              // cmd_mux_002:src_data -> lw_bridge_s0_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_002_src_channel;                                           // cmd_mux_002:src_channel -> lw_bridge_s0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_ready;                                             // lw_bridge_s0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire          lw_bridge_s0_burst_adapter_source0_endofpacket;                    // lw_bridge_s0_burst_adapter:source0_endofpacket -> lw_bridge_s0_agent:cp_endofpacket
	wire          lw_bridge_s0_burst_adapter_source0_valid;                          // lw_bridge_s0_burst_adapter:source0_valid -> lw_bridge_s0_agent:cp_valid
	wire          lw_bridge_s0_burst_adapter_source0_startofpacket;                  // lw_bridge_s0_burst_adapter:source0_startofpacket -> lw_bridge_s0_agent:cp_startofpacket
	wire  [115:0] lw_bridge_s0_burst_adapter_source0_data;                           // lw_bridge_s0_burst_adapter:source0_data -> lw_bridge_s0_agent:cp_data
	wire          lw_bridge_s0_burst_adapter_source0_ready;                          // lw_bridge_s0_agent:cp_ready -> lw_bridge_s0_burst_adapter:source0_ready
	wire    [4:0] lw_bridge_s0_burst_adapter_source0_channel;                        // lw_bridge_s0_burst_adapter:source0_channel -> lw_bridge_s0_agent:cp_channel
	wire          cmd_mux_003_src_endofpacket;                                       // cmd_mux_003:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                             // cmd_mux_003:src_valid -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire          cmd_mux_003_src_startofpacket;                                     // cmd_mux_003:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire  [115:0] cmd_mux_003_src_data;                                              // cmd_mux_003:src_data -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_003_src_channel;                                           // cmd_mux_003:src_channel -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_ready;                                             // jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;   // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid;         // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket; // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire  [115:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data;          // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready;         // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [4:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel;       // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_004_src_endofpacket;                                       // cmd_mux_004:src_endofpacket -> timer_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                             // cmd_mux_004:src_valid -> timer_0_s1_burst_adapter:sink0_valid
	wire          cmd_mux_004_src_startofpacket;                                     // cmd_mux_004:src_startofpacket -> timer_0_s1_burst_adapter:sink0_startofpacket
	wire  [115:0] cmd_mux_004_src_data;                                              // cmd_mux_004:src_data -> timer_0_s1_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_004_src_channel;                                           // cmd_mux_004:src_channel -> timer_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_ready;                                             // timer_0_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire          timer_0_s1_burst_adapter_source0_endofpacket;                      // timer_0_s1_burst_adapter:source0_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          timer_0_s1_burst_adapter_source0_valid;                            // timer_0_s1_burst_adapter:source0_valid -> timer_0_s1_agent:cp_valid
	wire          timer_0_s1_burst_adapter_source0_startofpacket;                    // timer_0_s1_burst_adapter:source0_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire  [115:0] timer_0_s1_burst_adapter_source0_data;                             // timer_0_s1_burst_adapter:source0_data -> timer_0_s1_agent:cp_data
	wire          timer_0_s1_burst_adapter_source0_ready;                            // timer_0_s1_agent:cp_ready -> timer_0_s1_burst_adapter:source0_ready
	wire    [4:0] timer_0_s1_burst_adapter_source0_channel;                          // timer_0_s1_burst_adapter:source0_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [115:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [4:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [115:0] cmd_demux_src1_data;                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire    [4:0] cmd_demux_src1_channel;                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                        // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                              // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                      // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [115:0] cmd_demux_src2_data;                                               // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire    [4:0] cmd_demux_src2_channel;                                            // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                              // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src3_endofpacket;                                        // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                              // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_src3_startofpacket;                                      // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [115:0] cmd_demux_src3_data;                                               // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire    [4:0] cmd_demux_src3_channel;                                            // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_ready;                                              // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire          cmd_demux_src4_endofpacket;                                        // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                              // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                      // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [115:0] cmd_demux_src4_data;                                               // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire    [4:0] cmd_demux_src4_channel;                                            // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                              // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_001_src0_endofpacket;                                    // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                          // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire          cmd_demux_001_src0_startofpacket;                                  // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [115:0] cmd_demux_001_src0_data;                                           // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire    [4:0] cmd_demux_001_src0_channel;                                        // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_ready;                                          // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire          cmd_demux_001_src1_endofpacket;                                    // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                          // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire          cmd_demux_001_src1_startofpacket;                                  // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [115:0] cmd_demux_001_src1_data;                                           // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire    [4:0] cmd_demux_001_src1_channel;                                        // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_ready;                                          // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire          cmd_demux_001_src2_endofpacket;                                    // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                          // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire          cmd_demux_001_src2_startofpacket;                                  // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire  [115:0] cmd_demux_001_src2_data;                                           // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire    [4:0] cmd_demux_001_src2_channel;                                        // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_ready;                                          // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire          cmd_demux_001_src3_endofpacket;                                    // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                          // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire          cmd_demux_001_src3_startofpacket;                                  // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire  [115:0] cmd_demux_001_src3_data;                                           // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire    [4:0] cmd_demux_001_src3_channel;                                        // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_ready;                                          // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire          cmd_demux_001_src4_endofpacket;                                    // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                          // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire          cmd_demux_001_src4_startofpacket;                                  // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire  [115:0] cmd_demux_001_src4_data;                                           // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire    [4:0] cmd_demux_001_src4_channel;                                        // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_ready;                                          // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [115:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [4:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_src1_endofpacket;                                        // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                              // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire          rsp_demux_src1_startofpacket;                                      // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [115:0] rsp_demux_src1_data;                                               // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire    [4:0] rsp_demux_src1_channel;                                            // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_ready;                                              // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire          rsp_demux_001_src0_endofpacket;                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [115:0] rsp_demux_001_src0_data;                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire    [4:0] rsp_demux_001_src0_channel;                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_001_src1_endofpacket;                                    // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                          // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire          rsp_demux_001_src1_startofpacket;                                  // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [115:0] rsp_demux_001_src1_data;                                           // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire    [4:0] rsp_demux_001_src1_channel;                                        // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_ready;                                          // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire          rsp_demux_002_src0_endofpacket;                                    // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                          // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                  // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [115:0] rsp_demux_002_src0_data;                                           // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire    [4:0] rsp_demux_002_src0_channel;                                        // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                          // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_002_src1_endofpacket;                                    // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                          // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire          rsp_demux_002_src1_startofpacket;                                  // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [115:0] rsp_demux_002_src1_data;                                           // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire    [4:0] rsp_demux_002_src1_channel;                                        // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_ready;                                          // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire          rsp_demux_003_src0_endofpacket;                                    // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                          // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                  // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [115:0] rsp_demux_003_src0_data;                                           // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire    [4:0] rsp_demux_003_src0_channel;                                        // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_ready;                                          // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_003_src1_endofpacket;                                    // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                          // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire          rsp_demux_003_src1_startofpacket;                                  // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [115:0] rsp_demux_003_src1_data;                                           // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire    [4:0] rsp_demux_003_src1_channel;                                        // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_ready;                                          // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire          rsp_demux_004_src0_endofpacket;                                    // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                          // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                  // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [115:0] rsp_demux_004_src0_data;                                           // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire    [4:0] rsp_demux_004_src0_channel;                                        // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                          // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_004_src1_endofpacket;                                    // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                          // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire          rsp_demux_004_src1_startofpacket;                                  // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [115:0] rsp_demux_004_src1_data;                                           // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire    [4:0] rsp_demux_004_src1_channel;                                        // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_ready;                                          // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [4:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [4:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                 // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                      (clk_50_clk_clk),                              //                      clk.clk
		.reset                    (dipsw_pio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (dipsw_pio_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (dipsw_pio_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (dipsw_pio_s1_agent_m0_read),                  //                         .read
		.uav_write                (dipsw_pio_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (dipsw_pio_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (dipsw_pio_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (dipsw_pio_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (dipsw_pio_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (dipsw_pio_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (dipsw_pio_s1_write),                          //                         .write
		.av_readdata              (dipsw_pio_s1_readdata),                       //                         .readdata
		.av_writedata             (dipsw_pio_s1_writedata),                      //                         .writedata
		.av_chipselect            (dipsw_pio_s1_chipselect),                     //                         .chipselect
		.av_read                  (),                                            //              (terminated)
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                      (clk_50_clk_clk),                              //                      clk.clk
		.reset                    (dipsw_pio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (button_pio_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (button_pio_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (button_pio_s1_agent_m0_read),                 //                         .read
		.uav_write                (button_pio_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (button_pio_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (button_pio_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (button_pio_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (button_pio_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (button_pio_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (button_pio_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (button_pio_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (button_pio_s1_write),                         //                         .write
		.av_readdata              (button_pio_s1_readdata),                      //                         .readdata
		.av_writedata             (button_pio_s1_writedata),                     //                         .writedata
		.av_chipselect            (button_pio_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                            //              (terminated)
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lw_bridge_s0_translator (
		.clk                      (clk_50_clk_clk),                              //                      clk.clk
		.reset                    (lw_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lw_bridge_s0_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (lw_bridge_s0_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (lw_bridge_s0_agent_m0_read),                  //                         .read
		.uav_write                (lw_bridge_s0_agent_m0_write),                 //                         .write
		.uav_waitrequest          (lw_bridge_s0_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (lw_bridge_s0_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (lw_bridge_s0_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (lw_bridge_s0_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (lw_bridge_s0_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (lw_bridge_s0_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (lw_bridge_s0_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (lw_bridge_s0_address),                        //      avalon_anti_slave_0.address
		.av_write                 (lw_bridge_s0_write),                          //                         .write
		.av_read                  (lw_bridge_s0_read),                           //                         .read
		.av_readdata              (lw_bridge_s0_readdata),                       //                         .readdata
		.av_writedata             (lw_bridge_s0_writedata),                      //                         .writedata
		.av_burstcount            (lw_bridge_s0_burstcount),                     //                         .burstcount
		.av_byteenable            (lw_bridge_s0_byteenable),                     //                         .byteenable
		.av_readdatavalid         (lw_bridge_s0_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (lw_bridge_s0_waitrequest),                    //                         .waitrequest
		.av_debugaccess           (lw_bridge_s0_debugaccess),                    //                         .debugaccess
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_chipselect            (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                      (clk_50_clk_clk),                                       //                      clk.clk
		.reset                    (dipsw_pio_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                      (clk_50_clk_clk),                              //                      clk.clk
		.reset                    (lw_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (timer_0_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (timer_0_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (timer_0_s1_agent_m0_read),                    //                         .read
		.uav_write                (timer_0_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (timer_0_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (timer_0_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (timer_0_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (timer_0_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (timer_0_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (timer_0_s1_write),                            //                         .write
		.av_readdata              (timer_0_s1_readdata),                         //                         .readdata
		.av_writedata             (timer_0_s1_writedata),                        //                         .writedata
		.av_chipselect            (timer_0_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                            //              (terminated)
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (92),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_50_clk_clk),                                                       //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dipsw_pio_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (dipsw_pio_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dipsw_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dipsw_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dipsw_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dipsw_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dipsw_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (dipsw_pio_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dipsw_pio_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (dipsw_pio_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (dipsw_pio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (dipsw_pio_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (dipsw_pio_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (dipsw_pio_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (dipsw_pio_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (dipsw_pio_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) button_pio_s1_agent (
		.clk                     (clk_50_clk_clk),                                    //             clk.clk
		.reset                   (dipsw_pio_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (button_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (button_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (button_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (button_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (button_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (button_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (button_pio_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (button_pio_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (button_pio_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                 //       clk.clk
		.reset             (dipsw_pio_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (button_pio_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (button_pio_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (button_pio_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (button_pio_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (button_pio_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lw_bridge_s0_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (lw_bridge_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (lw_bridge_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lw_bridge_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lw_bridge_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lw_bridge_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lw_bridge_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (lw_bridge_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lw_bridge_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lw_bridge_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (lw_bridge_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lw_bridge_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (lw_bridge_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (lw_bridge_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lw_bridge_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (lw_bridge_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (lw_bridge_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (lw_bridge_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lw_bridge_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lw_bridge_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lw_bridge_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lw_bridge_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lw_bridge_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lw_bridge_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lw_bridge_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lw_bridge_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lw_bridge_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lw_bridge_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lw_bridge_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lw_bridge_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lw_bridge_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lw_bridge_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lw_bridge_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lw_bridge_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (lw_bridge_s0_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lw_bridge_s0_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (lw_bridge_s0_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (lw_bridge_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lw_bridge_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lw_bridge_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lw_bridge_s0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (lw_bridge_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (lw_bridge_s0_agent_rf_source_data),             //        in.data
		.in_valid          (lw_bridge_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (lw_bridge_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lw_bridge_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lw_bridge_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lw_bridge_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lw_bridge_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lw_bridge_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lw_bridge_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lw_bridge_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lw_bridge_s0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lw_bridge_s0_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (lw_bridge_s0_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (lw_bridge_s0_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (lw_bridge_s0_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (lw_bridge_s0_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (lw_bridge_s0_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_50_clk_clk),                                                    //             clk.clk
		.reset                   (dipsw_pio_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                 //       clk.clk
		.reset             (dipsw_pio_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                           //       clk.clk
		.reset             (dipsw_pio_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) timer_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                 //             clk.clk
		.reset                   (lw_bridge_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (timer_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (timer_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (timer_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (timer_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (timer_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (timer_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (timer_0_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (timer_0_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (timer_0_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	soc_system_host_0_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                 //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                        //       src.ready
		.src_valid          (router_002_src_valid),                        //          .valid
		.src_data           (router_002_src_data),                         //          .data
		.src_channel        (router_002_src_channel),                      //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                   //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                        //       src.ready
		.src_valid          (router_003_src_valid),                        //          .valid
		.src_data           (router_003_src_data),                         //          .data
		.src_channel        (router_003_src_channel),                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                   //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (lw_bridge_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (lw_bridge_s0_agent_rp_valid),                 //          .valid
		.sink_data          (lw_bridge_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (lw_bridge_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (lw_bridge_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                        //       src.ready
		.src_valid          (router_004_src_valid),                        //          .valid
		.src_data           (router_004_src_data),                         //          .data
		.src_channel        (router_004_src_channel),                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                   //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                       //       clk.clk
		.reset              (dipsw_pio_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                   //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                        //       src.ready
		.src_valid          (router_006_src_valid),                        //          .valid
		.src_data           (router_006_src_data),                         //          .data
		.src_channel        (router_006_src_channel),                      //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_50_clk_clk),                                                      //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_50_clk_clk),                                                      //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dipsw_pio_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                   //       cr0.clk
		.reset                 (dipsw_pio_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                //          .ready
		.source0_valid         (dipsw_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dipsw_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (dipsw_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dipsw_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dipsw_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_pio_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                    //       cr0.clk
		.reset                 (dipsw_pio_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                              //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                             //          .ready
		.source0_valid         (button_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (button_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (button_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (button_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (button_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (button_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) lw_bridge_s0_burst_adapter (
		.clk                   (clk_50_clk_clk),                                   //       cr0.clk
		.reset                 (lw_bridge_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //          .ready
		.source0_valid         (lw_bridge_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lw_bridge_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (lw_bridge_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lw_bridge_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lw_bridge_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lw_bridge_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_0_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_50_clk_clk),                                                    //       cr0.clk
		.reset                 (dipsw_pio_reset_reset_bridge_in_reset_reset),                       // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                             //          .ready
		.source0_valid         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) timer_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                 //       cr0.clk
		.reset                 (lw_bridge_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                           //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                          //          .ready
		.source0_valid         (timer_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (timer_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (timer_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (timer_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (timer_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (timer_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_host_0_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                                                      //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                                           //           .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_50_clk_clk),                                                      //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                                       //           .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                       //          .valid
		.src_data            (cmd_mux_003_src_data),                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                      //          .channel
		.sink0_data          (cmd_demux_src3_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                       //          .valid
		.src_data            (cmd_mux_004_src_data),                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_src1_data),                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //      sink.ready
		.sink_channel       (router_004_src_channel),                      //          .channel
		.sink_data          (router_004_src_data),                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (dipsw_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                        //      sink.ready
		.sink_channel       (router_005_src_channel),                      //          .channel
		.sink_data          (router_005_src_data),                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_003_src1_data),                     //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (lw_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                        //      sink.ready
		.sink_channel       (router_006_src_channel),                      //          .channel
		.sink_data          (router_006_src_data),                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)               //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                                       //          .endofpacket
	);

	soc_system_host_0_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_50_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket)                                       //          .endofpacket
	);

endmodule
