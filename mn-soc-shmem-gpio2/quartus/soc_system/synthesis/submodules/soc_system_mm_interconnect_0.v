// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2018.02.08.18:46:04

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire        clk_100_outclk0_clk,                                           //                                         clk_100_outclk0.clk
		input  wire        clk_50_clk_clk,                                                //                                              clk_50_clk.clk
		input  wire        host_0_reset_clk50_reset_bridge_in_reset_reset,                //                host_0_reset_clk50_reset_bridge_in_reset.reset
		input  wire        openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset, // openmac_0_pktBuf_translator_reset_reset_bridge_in_reset.reset
		input  wire        openmac_0_pktRst_reset_bridge_in_reset_reset,                  //                  openmac_0_pktRst_reset_bridge_in_reset.reset
		input  wire        sysid_qsys_reset_reset_bridge_in_reset_reset,                  //                  sysid_qsys_reset_reset_bridge_in_reset.reset
		input  wire [17:0] host_0_lw_bridge_m0_address,                                   //                                     host_0_lw_bridge_m0.address
		output wire        host_0_lw_bridge_m0_waitrequest,                               //                                                        .waitrequest
		input  wire [0:0]  host_0_lw_bridge_m0_burstcount,                                //                                                        .burstcount
		input  wire [3:0]  host_0_lw_bridge_m0_byteenable,                                //                                                        .byteenable
		input  wire        host_0_lw_bridge_m0_read,                                      //                                                        .read
		output wire [31:0] host_0_lw_bridge_m0_readdata,                                  //                                                        .readdata
		output wire        host_0_lw_bridge_m0_readdatavalid,                             //                                                        .readdatavalid
		input  wire        host_0_lw_bridge_m0_write,                                     //                                                        .write
		input  wire [31:0] host_0_lw_bridge_m0_writedata,                                 //                                                        .writedata
		input  wire        host_0_lw_bridge_m0_debugaccess,                               //                                                        .debugaccess
		input  wire [18:0] pcp_0_slow_bridge_address,                                     //                                       pcp_0_slow_bridge.address
		output wire        pcp_0_slow_bridge_waitrequest,                                 //                                                        .waitrequest
		input  wire [0:0]  pcp_0_slow_bridge_burstcount,                                  //                                                        .burstcount
		input  wire [3:0]  pcp_0_slow_bridge_byteenable,                                  //                                                        .byteenable
		input  wire        pcp_0_slow_bridge_read,                                        //                                                        .read
		output wire [31:0] pcp_0_slow_bridge_readdata,                                    //                                                        .readdata
		output wire        pcp_0_slow_bridge_readdatavalid,                               //                                                        .readdatavalid
		input  wire        pcp_0_slow_bridge_write,                                       //                                                        .write
		input  wire [31:0] pcp_0_slow_bridge_writedata,                                   //                                                        .writedata
		input  wire        pcp_0_slow_bridge_debugaccess,                                 //                                                        .debugaccess
		output wire [10:0] com_mem_s1_address,                                            //                                              com_mem_s1.address
		output wire        com_mem_s1_write,                                              //                                                        .write
		input  wire [31:0] com_mem_s1_readdata,                                           //                                                        .readdata
		output wire [31:0] com_mem_s1_writedata,                                          //                                                        .writedata
		output wire [3:0]  com_mem_s1_byteenable,                                         //                                                        .byteenable
		output wire        com_mem_s1_chipselect,                                         //                                                        .chipselect
		output wire        com_mem_s1_clken,                                              //                                                        .clken
		output wire [10:0] com_mem_s2_address,                                            //                                              com_mem_s2.address
		output wire        com_mem_s2_write,                                              //                                                        .write
		input  wire [31:0] com_mem_s2_readdata,                                           //                                                        .readdata
		output wire [31:0] com_mem_s2_writedata,                                          //                                                        .writedata
		output wire [3:0]  com_mem_s2_byteenable,                                         //                                                        .byteenable
		output wire        com_mem_s2_chipselect,                                         //                                                        .chipselect
		output wire        com_mem_s2_clken,                                              //                                                        .clken
		output wire [11:0] openmac_0_macReg_address,                                      //                                        openmac_0_macReg.address
		output wire        openmac_0_macReg_write,                                        //                                                        .write
		output wire        openmac_0_macReg_read,                                         //                                                        .read
		input  wire [15:0] openmac_0_macReg_readdata,                                     //                                                        .readdata
		output wire [15:0] openmac_0_macReg_writedata,                                    //                                                        .writedata
		output wire [1:0]  openmac_0_macReg_byteenable,                                   //                                                        .byteenable
		input  wire        openmac_0_macReg_waitrequest,                                  //                                                        .waitrequest
		output wire        openmac_0_macReg_chipselect,                                   //                                                        .chipselect
		output wire [2:0]  openmac_0_macTimer_address,                                    //                                      openmac_0_macTimer.address
		output wire        openmac_0_macTimer_write,                                      //                                                        .write
		output wire        openmac_0_macTimer_read,                                       //                                                        .read
		input  wire [31:0] openmac_0_macTimer_readdata,                                   //                                                        .readdata
		output wire [31:0] openmac_0_macTimer_writedata,                                  //                                                        .writedata
		output wire [3:0]  openmac_0_macTimer_byteenable,                                 //                                                        .byteenable
		input  wire        openmac_0_macTimer_waitrequest,                                //                                                        .waitrequest
		output wire        openmac_0_macTimer_chipselect,                                 //                                                        .chipselect
		output wire [12:0] openmac_0_pktBuf_address,                                      //                                        openmac_0_pktBuf.address
		output wire        openmac_0_pktBuf_write,                                        //                                                        .write
		output wire        openmac_0_pktBuf_read,                                         //                                                        .read
		input  wire [31:0] openmac_0_pktBuf_readdata,                                     //                                                        .readdata
		output wire [31:0] openmac_0_pktBuf_writedata,                                    //                                                        .writedata
		output wire [3:0]  openmac_0_pktBuf_byteenable,                                   //                                                        .byteenable
		input  wire        openmac_0_pktBuf_waitrequest,                                  //                                                        .waitrequest
		output wire        openmac_0_pktBuf_chipselect,                                   //                                                        .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,                              //                                sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata                              //                                                        .readdata
	);

	wire         host_0_lw_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // host_0_lw_bridge_m0_agent:av_waitrequest -> host_0_lw_bridge_m0_translator:uav_waitrequest
	wire   [2:0] host_0_lw_bridge_m0_translator_avalon_universal_master_0_burstcount;    // host_0_lw_bridge_m0_translator:uav_burstcount -> host_0_lw_bridge_m0_agent:av_burstcount
	wire  [31:0] host_0_lw_bridge_m0_translator_avalon_universal_master_0_writedata;     // host_0_lw_bridge_m0_translator:uav_writedata -> host_0_lw_bridge_m0_agent:av_writedata
	wire  [18:0] host_0_lw_bridge_m0_translator_avalon_universal_master_0_address;       // host_0_lw_bridge_m0_translator:uav_address -> host_0_lw_bridge_m0_agent:av_address
	wire         host_0_lw_bridge_m0_translator_avalon_universal_master_0_lock;          // host_0_lw_bridge_m0_translator:uav_lock -> host_0_lw_bridge_m0_agent:av_lock
	wire         host_0_lw_bridge_m0_translator_avalon_universal_master_0_write;         // host_0_lw_bridge_m0_translator:uav_write -> host_0_lw_bridge_m0_agent:av_write
	wire         host_0_lw_bridge_m0_translator_avalon_universal_master_0_read;          // host_0_lw_bridge_m0_translator:uav_read -> host_0_lw_bridge_m0_agent:av_read
	wire  [31:0] host_0_lw_bridge_m0_translator_avalon_universal_master_0_readdata;      // host_0_lw_bridge_m0_agent:av_readdata -> host_0_lw_bridge_m0_translator:uav_readdata
	wire         host_0_lw_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // host_0_lw_bridge_m0_translator:uav_debugaccess -> host_0_lw_bridge_m0_agent:av_debugaccess
	wire   [3:0] host_0_lw_bridge_m0_translator_avalon_universal_master_0_byteenable;    // host_0_lw_bridge_m0_translator:uav_byteenable -> host_0_lw_bridge_m0_agent:av_byteenable
	wire         host_0_lw_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // host_0_lw_bridge_m0_agent:av_readdatavalid -> host_0_lw_bridge_m0_translator:uav_readdatavalid
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_waitrequest;     // pcp_0_slow_bridge_agent:av_waitrequest -> pcp_0_slow_bridge_translator:uav_waitrequest
	wire   [2:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_burstcount;      // pcp_0_slow_bridge_translator:uav_burstcount -> pcp_0_slow_bridge_agent:av_burstcount
	wire  [31:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_writedata;       // pcp_0_slow_bridge_translator:uav_writedata -> pcp_0_slow_bridge_agent:av_writedata
	wire  [18:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_address;         // pcp_0_slow_bridge_translator:uav_address -> pcp_0_slow_bridge_agent:av_address
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_lock;            // pcp_0_slow_bridge_translator:uav_lock -> pcp_0_slow_bridge_agent:av_lock
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_write;           // pcp_0_slow_bridge_translator:uav_write -> pcp_0_slow_bridge_agent:av_write
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_read;            // pcp_0_slow_bridge_translator:uav_read -> pcp_0_slow_bridge_agent:av_read
	wire  [31:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_readdata;        // pcp_0_slow_bridge_agent:av_readdata -> pcp_0_slow_bridge_translator:uav_readdata
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_debugaccess;     // pcp_0_slow_bridge_translator:uav_debugaccess -> pcp_0_slow_bridge_agent:av_debugaccess
	wire   [3:0] pcp_0_slow_bridge_translator_avalon_universal_master_0_byteenable;      // pcp_0_slow_bridge_translator:uav_byteenable -> pcp_0_slow_bridge_agent:av_byteenable
	wire         pcp_0_slow_bridge_translator_avalon_universal_master_0_readdatavalid;   // pcp_0_slow_bridge_agent:av_readdatavalid -> pcp_0_slow_bridge_translator:uav_readdatavalid
	wire         sysid_qsys_control_slave_agent_m0_waitrequest;                          // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire   [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                           // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire  [31:0] sysid_qsys_control_slave_agent_m0_writedata;                            // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire  [18:0] sysid_qsys_control_slave_agent_m0_address;                              // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire         sysid_qsys_control_slave_agent_m0_write;                                // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire         sysid_qsys_control_slave_agent_m0_lock;                                 // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire         sysid_qsys_control_slave_agent_m0_read;                                 // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire  [31:0] sysid_qsys_control_slave_agent_m0_readdata;                             // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire         sysid_qsys_control_slave_agent_m0_readdatavalid;                        // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_control_slave_agent_m0_debugaccess;                          // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                           // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire         sysid_qsys_control_slave_agent_rf_source_endofpacket;                   // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_control_slave_agent_rf_source_valid;                         // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire         sysid_qsys_control_slave_agent_rf_source_startofpacket;                 // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [93:0] sysid_qsys_control_slave_agent_rf_source_data;                          // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_control_slave_agent_rf_source_ready;                         // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                      // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;              // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire  [93:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                       // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                      // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                    // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                     // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                    // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                                // cmd_mux:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                      // cmd_mux:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                              // cmd_mux:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire  [92:0] cmd_mux_src_data;                                                       // cmd_mux:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire   [5:0] cmd_mux_src_channel;                                                    // cmd_mux:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire         cmd_mux_src_ready;                                                      // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire         com_mem_s1_agent_m0_waitrequest;                                        // com_mem_s1_translator:uav_waitrequest -> com_mem_s1_agent:m0_waitrequest
	wire   [2:0] com_mem_s1_agent_m0_burstcount;                                         // com_mem_s1_agent:m0_burstcount -> com_mem_s1_translator:uav_burstcount
	wire  [31:0] com_mem_s1_agent_m0_writedata;                                          // com_mem_s1_agent:m0_writedata -> com_mem_s1_translator:uav_writedata
	wire  [18:0] com_mem_s1_agent_m0_address;                                            // com_mem_s1_agent:m0_address -> com_mem_s1_translator:uav_address
	wire         com_mem_s1_agent_m0_write;                                              // com_mem_s1_agent:m0_write -> com_mem_s1_translator:uav_write
	wire         com_mem_s1_agent_m0_lock;                                               // com_mem_s1_agent:m0_lock -> com_mem_s1_translator:uav_lock
	wire         com_mem_s1_agent_m0_read;                                               // com_mem_s1_agent:m0_read -> com_mem_s1_translator:uav_read
	wire  [31:0] com_mem_s1_agent_m0_readdata;                                           // com_mem_s1_translator:uav_readdata -> com_mem_s1_agent:m0_readdata
	wire         com_mem_s1_agent_m0_readdatavalid;                                      // com_mem_s1_translator:uav_readdatavalid -> com_mem_s1_agent:m0_readdatavalid
	wire         com_mem_s1_agent_m0_debugaccess;                                        // com_mem_s1_agent:m0_debugaccess -> com_mem_s1_translator:uav_debugaccess
	wire   [3:0] com_mem_s1_agent_m0_byteenable;                                         // com_mem_s1_agent:m0_byteenable -> com_mem_s1_translator:uav_byteenable
	wire         com_mem_s1_agent_rf_source_endofpacket;                                 // com_mem_s1_agent:rf_source_endofpacket -> com_mem_s1_agent_rsp_fifo:in_endofpacket
	wire         com_mem_s1_agent_rf_source_valid;                                       // com_mem_s1_agent:rf_source_valid -> com_mem_s1_agent_rsp_fifo:in_valid
	wire         com_mem_s1_agent_rf_source_startofpacket;                               // com_mem_s1_agent:rf_source_startofpacket -> com_mem_s1_agent_rsp_fifo:in_startofpacket
	wire  [93:0] com_mem_s1_agent_rf_source_data;                                        // com_mem_s1_agent:rf_source_data -> com_mem_s1_agent_rsp_fifo:in_data
	wire         com_mem_s1_agent_rf_source_ready;                                       // com_mem_s1_agent_rsp_fifo:in_ready -> com_mem_s1_agent:rf_source_ready
	wire         com_mem_s1_agent_rsp_fifo_out_endofpacket;                              // com_mem_s1_agent_rsp_fifo:out_endofpacket -> com_mem_s1_agent:rf_sink_endofpacket
	wire         com_mem_s1_agent_rsp_fifo_out_valid;                                    // com_mem_s1_agent_rsp_fifo:out_valid -> com_mem_s1_agent:rf_sink_valid
	wire         com_mem_s1_agent_rsp_fifo_out_startofpacket;                            // com_mem_s1_agent_rsp_fifo:out_startofpacket -> com_mem_s1_agent:rf_sink_startofpacket
	wire  [93:0] com_mem_s1_agent_rsp_fifo_out_data;                                     // com_mem_s1_agent_rsp_fifo:out_data -> com_mem_s1_agent:rf_sink_data
	wire         com_mem_s1_agent_rsp_fifo_out_ready;                                    // com_mem_s1_agent:rf_sink_ready -> com_mem_s1_agent_rsp_fifo:out_ready
	wire         com_mem_s1_agent_rdata_fifo_src_valid;                                  // com_mem_s1_agent:rdata_fifo_src_valid -> com_mem_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] com_mem_s1_agent_rdata_fifo_src_data;                                   // com_mem_s1_agent:rdata_fifo_src_data -> com_mem_s1_agent:rdata_fifo_sink_data
	wire         com_mem_s1_agent_rdata_fifo_src_ready;                                  // com_mem_s1_agent:rdata_fifo_sink_ready -> com_mem_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                            // cmd_mux_001:src_endofpacket -> com_mem_s1_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                  // cmd_mux_001:src_valid -> com_mem_s1_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                          // cmd_mux_001:src_startofpacket -> com_mem_s1_agent:cp_startofpacket
	wire  [92:0] cmd_mux_001_src_data;                                                   // cmd_mux_001:src_data -> com_mem_s1_agent:cp_data
	wire   [5:0] cmd_mux_001_src_channel;                                                // cmd_mux_001:src_channel -> com_mem_s1_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                                  // com_mem_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire         openmac_0_macreg_agent_m0_waitrequest;                                  // openmac_0_macReg_translator:uav_waitrequest -> openmac_0_macReg_agent:m0_waitrequest
	wire   [1:0] openmac_0_macreg_agent_m0_burstcount;                                   // openmac_0_macReg_agent:m0_burstcount -> openmac_0_macReg_translator:uav_burstcount
	wire  [15:0] openmac_0_macreg_agent_m0_writedata;                                    // openmac_0_macReg_agent:m0_writedata -> openmac_0_macReg_translator:uav_writedata
	wire  [18:0] openmac_0_macreg_agent_m0_address;                                      // openmac_0_macReg_agent:m0_address -> openmac_0_macReg_translator:uav_address
	wire         openmac_0_macreg_agent_m0_write;                                        // openmac_0_macReg_agent:m0_write -> openmac_0_macReg_translator:uav_write
	wire         openmac_0_macreg_agent_m0_lock;                                         // openmac_0_macReg_agent:m0_lock -> openmac_0_macReg_translator:uav_lock
	wire         openmac_0_macreg_agent_m0_read;                                         // openmac_0_macReg_agent:m0_read -> openmac_0_macReg_translator:uav_read
	wire  [15:0] openmac_0_macreg_agent_m0_readdata;                                     // openmac_0_macReg_translator:uav_readdata -> openmac_0_macReg_agent:m0_readdata
	wire         openmac_0_macreg_agent_m0_readdatavalid;                                // openmac_0_macReg_translator:uav_readdatavalid -> openmac_0_macReg_agent:m0_readdatavalid
	wire         openmac_0_macreg_agent_m0_debugaccess;                                  // openmac_0_macReg_agent:m0_debugaccess -> openmac_0_macReg_translator:uav_debugaccess
	wire   [1:0] openmac_0_macreg_agent_m0_byteenable;                                   // openmac_0_macReg_agent:m0_byteenable -> openmac_0_macReg_translator:uav_byteenable
	wire         openmac_0_macreg_agent_rf_source_endofpacket;                           // openmac_0_macReg_agent:rf_source_endofpacket -> openmac_0_macReg_agent_rsp_fifo:in_endofpacket
	wire         openmac_0_macreg_agent_rf_source_valid;                                 // openmac_0_macReg_agent:rf_source_valid -> openmac_0_macReg_agent_rsp_fifo:in_valid
	wire         openmac_0_macreg_agent_rf_source_startofpacket;                         // openmac_0_macReg_agent:rf_source_startofpacket -> openmac_0_macReg_agent_rsp_fifo:in_startofpacket
	wire  [75:0] openmac_0_macreg_agent_rf_source_data;                                  // openmac_0_macReg_agent:rf_source_data -> openmac_0_macReg_agent_rsp_fifo:in_data
	wire         openmac_0_macreg_agent_rf_source_ready;                                 // openmac_0_macReg_agent_rsp_fifo:in_ready -> openmac_0_macReg_agent:rf_source_ready
	wire         openmac_0_macreg_agent_rsp_fifo_out_endofpacket;                        // openmac_0_macReg_agent_rsp_fifo:out_endofpacket -> openmac_0_macReg_agent:rf_sink_endofpacket
	wire         openmac_0_macreg_agent_rsp_fifo_out_valid;                              // openmac_0_macReg_agent_rsp_fifo:out_valid -> openmac_0_macReg_agent:rf_sink_valid
	wire         openmac_0_macreg_agent_rsp_fifo_out_startofpacket;                      // openmac_0_macReg_agent_rsp_fifo:out_startofpacket -> openmac_0_macReg_agent:rf_sink_startofpacket
	wire  [75:0] openmac_0_macreg_agent_rsp_fifo_out_data;                               // openmac_0_macReg_agent_rsp_fifo:out_data -> openmac_0_macReg_agent:rf_sink_data
	wire         openmac_0_macreg_agent_rsp_fifo_out_ready;                              // openmac_0_macReg_agent:rf_sink_ready -> openmac_0_macReg_agent_rsp_fifo:out_ready
	wire         openmac_0_macreg_agent_rdata_fifo_src_valid;                            // openmac_0_macReg_agent:rdata_fifo_src_valid -> openmac_0_macReg_agent:rdata_fifo_sink_valid
	wire  [17:0] openmac_0_macreg_agent_rdata_fifo_src_data;                             // openmac_0_macReg_agent:rdata_fifo_src_data -> openmac_0_macReg_agent:rdata_fifo_sink_data
	wire         openmac_0_macreg_agent_rdata_fifo_src_ready;                            // openmac_0_macReg_agent:rdata_fifo_sink_ready -> openmac_0_macReg_agent:rdata_fifo_src_ready
	wire         openmac_0_mactimer_agent_m0_waitrequest;                                // openmac_0_macTimer_translator:uav_waitrequest -> openmac_0_macTimer_agent:m0_waitrequest
	wire   [2:0] openmac_0_mactimer_agent_m0_burstcount;                                 // openmac_0_macTimer_agent:m0_burstcount -> openmac_0_macTimer_translator:uav_burstcount
	wire  [31:0] openmac_0_mactimer_agent_m0_writedata;                                  // openmac_0_macTimer_agent:m0_writedata -> openmac_0_macTimer_translator:uav_writedata
	wire  [18:0] openmac_0_mactimer_agent_m0_address;                                    // openmac_0_macTimer_agent:m0_address -> openmac_0_macTimer_translator:uav_address
	wire         openmac_0_mactimer_agent_m0_write;                                      // openmac_0_macTimer_agent:m0_write -> openmac_0_macTimer_translator:uav_write
	wire         openmac_0_mactimer_agent_m0_lock;                                       // openmac_0_macTimer_agent:m0_lock -> openmac_0_macTimer_translator:uav_lock
	wire         openmac_0_mactimer_agent_m0_read;                                       // openmac_0_macTimer_agent:m0_read -> openmac_0_macTimer_translator:uav_read
	wire  [31:0] openmac_0_mactimer_agent_m0_readdata;                                   // openmac_0_macTimer_translator:uav_readdata -> openmac_0_macTimer_agent:m0_readdata
	wire         openmac_0_mactimer_agent_m0_readdatavalid;                              // openmac_0_macTimer_translator:uav_readdatavalid -> openmac_0_macTimer_agent:m0_readdatavalid
	wire         openmac_0_mactimer_agent_m0_debugaccess;                                // openmac_0_macTimer_agent:m0_debugaccess -> openmac_0_macTimer_translator:uav_debugaccess
	wire   [3:0] openmac_0_mactimer_agent_m0_byteenable;                                 // openmac_0_macTimer_agent:m0_byteenable -> openmac_0_macTimer_translator:uav_byteenable
	wire         openmac_0_mactimer_agent_rf_source_endofpacket;                         // openmac_0_macTimer_agent:rf_source_endofpacket -> openmac_0_macTimer_agent_rsp_fifo:in_endofpacket
	wire         openmac_0_mactimer_agent_rf_source_valid;                               // openmac_0_macTimer_agent:rf_source_valid -> openmac_0_macTimer_agent_rsp_fifo:in_valid
	wire         openmac_0_mactimer_agent_rf_source_startofpacket;                       // openmac_0_macTimer_agent:rf_source_startofpacket -> openmac_0_macTimer_agent_rsp_fifo:in_startofpacket
	wire  [93:0] openmac_0_mactimer_agent_rf_source_data;                                // openmac_0_macTimer_agent:rf_source_data -> openmac_0_macTimer_agent_rsp_fifo:in_data
	wire         openmac_0_mactimer_agent_rf_source_ready;                               // openmac_0_macTimer_agent_rsp_fifo:in_ready -> openmac_0_macTimer_agent:rf_source_ready
	wire         openmac_0_mactimer_agent_rsp_fifo_out_endofpacket;                      // openmac_0_macTimer_agent_rsp_fifo:out_endofpacket -> openmac_0_macTimer_agent:rf_sink_endofpacket
	wire         openmac_0_mactimer_agent_rsp_fifo_out_valid;                            // openmac_0_macTimer_agent_rsp_fifo:out_valid -> openmac_0_macTimer_agent:rf_sink_valid
	wire         openmac_0_mactimer_agent_rsp_fifo_out_startofpacket;                    // openmac_0_macTimer_agent_rsp_fifo:out_startofpacket -> openmac_0_macTimer_agent:rf_sink_startofpacket
	wire  [93:0] openmac_0_mactimer_agent_rsp_fifo_out_data;                             // openmac_0_macTimer_agent_rsp_fifo:out_data -> openmac_0_macTimer_agent:rf_sink_data
	wire         openmac_0_mactimer_agent_rsp_fifo_out_ready;                            // openmac_0_macTimer_agent:rf_sink_ready -> openmac_0_macTimer_agent_rsp_fifo:out_ready
	wire         openmac_0_mactimer_agent_rdata_fifo_src_valid;                          // openmac_0_macTimer_agent:rdata_fifo_src_valid -> openmac_0_macTimer_agent:rdata_fifo_sink_valid
	wire  [33:0] openmac_0_mactimer_agent_rdata_fifo_src_data;                           // openmac_0_macTimer_agent:rdata_fifo_src_data -> openmac_0_macTimer_agent:rdata_fifo_sink_data
	wire         openmac_0_mactimer_agent_rdata_fifo_src_ready;                          // openmac_0_macTimer_agent:rdata_fifo_sink_ready -> openmac_0_macTimer_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_endofpacket;                                            // cmd_mux_003:src_endofpacket -> openmac_0_macTimer_agent:cp_endofpacket
	wire         cmd_mux_003_src_valid;                                                  // cmd_mux_003:src_valid -> openmac_0_macTimer_agent:cp_valid
	wire         cmd_mux_003_src_startofpacket;                                          // cmd_mux_003:src_startofpacket -> openmac_0_macTimer_agent:cp_startofpacket
	wire  [92:0] cmd_mux_003_src_data;                                                   // cmd_mux_003:src_data -> openmac_0_macTimer_agent:cp_data
	wire   [5:0] cmd_mux_003_src_channel;                                                // cmd_mux_003:src_channel -> openmac_0_macTimer_agent:cp_channel
	wire         cmd_mux_003_src_ready;                                                  // openmac_0_macTimer_agent:cp_ready -> cmd_mux_003:src_ready
	wire         openmac_0_pktbuf_agent_m0_waitrequest;                                  // openmac_0_pktBuf_translator:uav_waitrequest -> openmac_0_pktBuf_agent:m0_waitrequest
	wire   [2:0] openmac_0_pktbuf_agent_m0_burstcount;                                   // openmac_0_pktBuf_agent:m0_burstcount -> openmac_0_pktBuf_translator:uav_burstcount
	wire  [31:0] openmac_0_pktbuf_agent_m0_writedata;                                    // openmac_0_pktBuf_agent:m0_writedata -> openmac_0_pktBuf_translator:uav_writedata
	wire  [18:0] openmac_0_pktbuf_agent_m0_address;                                      // openmac_0_pktBuf_agent:m0_address -> openmac_0_pktBuf_translator:uav_address
	wire         openmac_0_pktbuf_agent_m0_write;                                        // openmac_0_pktBuf_agent:m0_write -> openmac_0_pktBuf_translator:uav_write
	wire         openmac_0_pktbuf_agent_m0_lock;                                         // openmac_0_pktBuf_agent:m0_lock -> openmac_0_pktBuf_translator:uav_lock
	wire         openmac_0_pktbuf_agent_m0_read;                                         // openmac_0_pktBuf_agent:m0_read -> openmac_0_pktBuf_translator:uav_read
	wire  [31:0] openmac_0_pktbuf_agent_m0_readdata;                                     // openmac_0_pktBuf_translator:uav_readdata -> openmac_0_pktBuf_agent:m0_readdata
	wire         openmac_0_pktbuf_agent_m0_readdatavalid;                                // openmac_0_pktBuf_translator:uav_readdatavalid -> openmac_0_pktBuf_agent:m0_readdatavalid
	wire         openmac_0_pktbuf_agent_m0_debugaccess;                                  // openmac_0_pktBuf_agent:m0_debugaccess -> openmac_0_pktBuf_translator:uav_debugaccess
	wire   [3:0] openmac_0_pktbuf_agent_m0_byteenable;                                   // openmac_0_pktBuf_agent:m0_byteenable -> openmac_0_pktBuf_translator:uav_byteenable
	wire         openmac_0_pktbuf_agent_rf_source_endofpacket;                           // openmac_0_pktBuf_agent:rf_source_endofpacket -> openmac_0_pktBuf_agent_rsp_fifo:in_endofpacket
	wire         openmac_0_pktbuf_agent_rf_source_valid;                                 // openmac_0_pktBuf_agent:rf_source_valid -> openmac_0_pktBuf_agent_rsp_fifo:in_valid
	wire         openmac_0_pktbuf_agent_rf_source_startofpacket;                         // openmac_0_pktBuf_agent:rf_source_startofpacket -> openmac_0_pktBuf_agent_rsp_fifo:in_startofpacket
	wire  [93:0] openmac_0_pktbuf_agent_rf_source_data;                                  // openmac_0_pktBuf_agent:rf_source_data -> openmac_0_pktBuf_agent_rsp_fifo:in_data
	wire         openmac_0_pktbuf_agent_rf_source_ready;                                 // openmac_0_pktBuf_agent_rsp_fifo:in_ready -> openmac_0_pktBuf_agent:rf_source_ready
	wire         openmac_0_pktbuf_agent_rsp_fifo_out_endofpacket;                        // openmac_0_pktBuf_agent_rsp_fifo:out_endofpacket -> openmac_0_pktBuf_agent:rf_sink_endofpacket
	wire         openmac_0_pktbuf_agent_rsp_fifo_out_valid;                              // openmac_0_pktBuf_agent_rsp_fifo:out_valid -> openmac_0_pktBuf_agent:rf_sink_valid
	wire         openmac_0_pktbuf_agent_rsp_fifo_out_startofpacket;                      // openmac_0_pktBuf_agent_rsp_fifo:out_startofpacket -> openmac_0_pktBuf_agent:rf_sink_startofpacket
	wire  [93:0] openmac_0_pktbuf_agent_rsp_fifo_out_data;                               // openmac_0_pktBuf_agent_rsp_fifo:out_data -> openmac_0_pktBuf_agent:rf_sink_data
	wire         openmac_0_pktbuf_agent_rsp_fifo_out_ready;                              // openmac_0_pktBuf_agent:rf_sink_ready -> openmac_0_pktBuf_agent_rsp_fifo:out_ready
	wire         openmac_0_pktbuf_agent_rdata_fifo_src_valid;                            // openmac_0_pktBuf_agent:rdata_fifo_src_valid -> openmac_0_pktBuf_agent_rdata_fifo:in_valid
	wire  [33:0] openmac_0_pktbuf_agent_rdata_fifo_src_data;                             // openmac_0_pktBuf_agent:rdata_fifo_src_data -> openmac_0_pktBuf_agent_rdata_fifo:in_data
	wire         openmac_0_pktbuf_agent_rdata_fifo_src_ready;                            // openmac_0_pktBuf_agent_rdata_fifo:in_ready -> openmac_0_pktBuf_agent:rdata_fifo_src_ready
	wire         openmac_0_pktbuf_agent_rdata_fifo_out_valid;                            // openmac_0_pktBuf_agent_rdata_fifo:out_valid -> openmac_0_pktBuf_agent:rdata_fifo_sink_valid
	wire  [33:0] openmac_0_pktbuf_agent_rdata_fifo_out_data;                             // openmac_0_pktBuf_agent_rdata_fifo:out_data -> openmac_0_pktBuf_agent:rdata_fifo_sink_data
	wire         openmac_0_pktbuf_agent_rdata_fifo_out_ready;                            // openmac_0_pktBuf_agent:rdata_fifo_sink_ready -> openmac_0_pktBuf_agent_rdata_fifo:out_ready
	wire         cmd_mux_004_src_endofpacket;                                            // cmd_mux_004:src_endofpacket -> openmac_0_pktBuf_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                                  // cmd_mux_004:src_valid -> openmac_0_pktBuf_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                          // cmd_mux_004:src_startofpacket -> openmac_0_pktBuf_agent:cp_startofpacket
	wire  [92:0] cmd_mux_004_src_data;                                                   // cmd_mux_004:src_data -> openmac_0_pktBuf_agent:cp_data
	wire   [5:0] cmd_mux_004_src_channel;                                                // cmd_mux_004:src_channel -> openmac_0_pktBuf_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                                  // openmac_0_pktBuf_agent:cp_ready -> cmd_mux_004:src_ready
	wire         com_mem_s2_agent_m0_waitrequest;                                        // com_mem_s2_translator:uav_waitrequest -> com_mem_s2_agent:m0_waitrequest
	wire   [2:0] com_mem_s2_agent_m0_burstcount;                                         // com_mem_s2_agent:m0_burstcount -> com_mem_s2_translator:uav_burstcount
	wire  [31:0] com_mem_s2_agent_m0_writedata;                                          // com_mem_s2_agent:m0_writedata -> com_mem_s2_translator:uav_writedata
	wire  [18:0] com_mem_s2_agent_m0_address;                                            // com_mem_s2_agent:m0_address -> com_mem_s2_translator:uav_address
	wire         com_mem_s2_agent_m0_write;                                              // com_mem_s2_agent:m0_write -> com_mem_s2_translator:uav_write
	wire         com_mem_s2_agent_m0_lock;                                               // com_mem_s2_agent:m0_lock -> com_mem_s2_translator:uav_lock
	wire         com_mem_s2_agent_m0_read;                                               // com_mem_s2_agent:m0_read -> com_mem_s2_translator:uav_read
	wire  [31:0] com_mem_s2_agent_m0_readdata;                                           // com_mem_s2_translator:uav_readdata -> com_mem_s2_agent:m0_readdata
	wire         com_mem_s2_agent_m0_readdatavalid;                                      // com_mem_s2_translator:uav_readdatavalid -> com_mem_s2_agent:m0_readdatavalid
	wire         com_mem_s2_agent_m0_debugaccess;                                        // com_mem_s2_agent:m0_debugaccess -> com_mem_s2_translator:uav_debugaccess
	wire   [3:0] com_mem_s2_agent_m0_byteenable;                                         // com_mem_s2_agent:m0_byteenable -> com_mem_s2_translator:uav_byteenable
	wire         com_mem_s2_agent_rf_source_endofpacket;                                 // com_mem_s2_agent:rf_source_endofpacket -> com_mem_s2_agent_rsp_fifo:in_endofpacket
	wire         com_mem_s2_agent_rf_source_valid;                                       // com_mem_s2_agent:rf_source_valid -> com_mem_s2_agent_rsp_fifo:in_valid
	wire         com_mem_s2_agent_rf_source_startofpacket;                               // com_mem_s2_agent:rf_source_startofpacket -> com_mem_s2_agent_rsp_fifo:in_startofpacket
	wire  [93:0] com_mem_s2_agent_rf_source_data;                                        // com_mem_s2_agent:rf_source_data -> com_mem_s2_agent_rsp_fifo:in_data
	wire         com_mem_s2_agent_rf_source_ready;                                       // com_mem_s2_agent_rsp_fifo:in_ready -> com_mem_s2_agent:rf_source_ready
	wire         com_mem_s2_agent_rsp_fifo_out_endofpacket;                              // com_mem_s2_agent_rsp_fifo:out_endofpacket -> com_mem_s2_agent:rf_sink_endofpacket
	wire         com_mem_s2_agent_rsp_fifo_out_valid;                                    // com_mem_s2_agent_rsp_fifo:out_valid -> com_mem_s2_agent:rf_sink_valid
	wire         com_mem_s2_agent_rsp_fifo_out_startofpacket;                            // com_mem_s2_agent_rsp_fifo:out_startofpacket -> com_mem_s2_agent:rf_sink_startofpacket
	wire  [93:0] com_mem_s2_agent_rsp_fifo_out_data;                                     // com_mem_s2_agent_rsp_fifo:out_data -> com_mem_s2_agent:rf_sink_data
	wire         com_mem_s2_agent_rsp_fifo_out_ready;                                    // com_mem_s2_agent:rf_sink_ready -> com_mem_s2_agent_rsp_fifo:out_ready
	wire         com_mem_s2_agent_rdata_fifo_src_valid;                                  // com_mem_s2_agent:rdata_fifo_src_valid -> com_mem_s2_agent:rdata_fifo_sink_valid
	wire  [33:0] com_mem_s2_agent_rdata_fifo_src_data;                                   // com_mem_s2_agent:rdata_fifo_src_data -> com_mem_s2_agent:rdata_fifo_sink_data
	wire         com_mem_s2_agent_rdata_fifo_src_ready;                                  // com_mem_s2_agent:rdata_fifo_sink_ready -> com_mem_s2_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_endofpacket;                                            // cmd_mux_005:src_endofpacket -> com_mem_s2_agent:cp_endofpacket
	wire         cmd_mux_005_src_valid;                                                  // cmd_mux_005:src_valid -> com_mem_s2_agent:cp_valid
	wire         cmd_mux_005_src_startofpacket;                                          // cmd_mux_005:src_startofpacket -> com_mem_s2_agent:cp_startofpacket
	wire  [92:0] cmd_mux_005_src_data;                                                   // cmd_mux_005:src_data -> com_mem_s2_agent:cp_data
	wire   [5:0] cmd_mux_005_src_channel;                                                // cmd_mux_005:src_channel -> com_mem_s2_agent:cp_channel
	wire         cmd_mux_005_src_ready;                                                  // com_mem_s2_agent:cp_ready -> cmd_mux_005:src_ready
	wire         host_0_lw_bridge_m0_agent_cp_endofpacket;                               // host_0_lw_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         host_0_lw_bridge_m0_agent_cp_valid;                                     // host_0_lw_bridge_m0_agent:cp_valid -> router:sink_valid
	wire         host_0_lw_bridge_m0_agent_cp_startofpacket;                             // host_0_lw_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [92:0] host_0_lw_bridge_m0_agent_cp_data;                                      // host_0_lw_bridge_m0_agent:cp_data -> router:sink_data
	wire         host_0_lw_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> host_0_lw_bridge_m0_agent:cp_ready
	wire         pcp_0_slow_bridge_agent_cp_endofpacket;                                 // pcp_0_slow_bridge_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         pcp_0_slow_bridge_agent_cp_valid;                                       // pcp_0_slow_bridge_agent:cp_valid -> router_001:sink_valid
	wire         pcp_0_slow_bridge_agent_cp_startofpacket;                               // pcp_0_slow_bridge_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [92:0] pcp_0_slow_bridge_agent_cp_data;                                        // pcp_0_slow_bridge_agent:cp_data -> router_001:sink_data
	wire         pcp_0_slow_bridge_agent_cp_ready;                                       // router_001:sink_ready -> pcp_0_slow_bridge_agent:cp_ready
	wire         sysid_qsys_control_slave_agent_rp_endofpacket;                          // sysid_qsys_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         sysid_qsys_control_slave_agent_rp_valid;                                // sysid_qsys_control_slave_agent:rp_valid -> router_002:sink_valid
	wire         sysid_qsys_control_slave_agent_rp_startofpacket;                        // sysid_qsys_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [92:0] sysid_qsys_control_slave_agent_rp_data;                                 // sysid_qsys_control_slave_agent:rp_data -> router_002:sink_data
	wire         sysid_qsys_control_slave_agent_rp_ready;                                // router_002:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire         router_002_src_endofpacket;                                             // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                                   // router_002:src_valid -> rsp_demux:sink_valid
	wire         router_002_src_startofpacket;                                           // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [92:0] router_002_src_data;                                                    // router_002:src_data -> rsp_demux:sink_data
	wire   [5:0] router_002_src_channel;                                                 // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_ready;                                                   // rsp_demux:sink_ready -> router_002:src_ready
	wire         com_mem_s1_agent_rp_endofpacket;                                        // com_mem_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         com_mem_s1_agent_rp_valid;                                              // com_mem_s1_agent:rp_valid -> router_003:sink_valid
	wire         com_mem_s1_agent_rp_startofpacket;                                      // com_mem_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [92:0] com_mem_s1_agent_rp_data;                                               // com_mem_s1_agent:rp_data -> router_003:sink_data
	wire         com_mem_s1_agent_rp_ready;                                              // router_003:sink_ready -> com_mem_s1_agent:rp_ready
	wire         router_003_src_endofpacket;                                             // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_003_src_valid;                                                   // router_003:src_valid -> rsp_demux_001:sink_valid
	wire         router_003_src_startofpacket;                                           // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [92:0] router_003_src_data;                                                    // router_003:src_data -> rsp_demux_001:sink_data
	wire   [5:0] router_003_src_channel;                                                 // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_ready;                                                   // rsp_demux_001:sink_ready -> router_003:src_ready
	wire         openmac_0_macreg_agent_rp_endofpacket;                                  // openmac_0_macReg_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         openmac_0_macreg_agent_rp_valid;                                        // openmac_0_macReg_agent:rp_valid -> router_004:sink_valid
	wire         openmac_0_macreg_agent_rp_startofpacket;                                // openmac_0_macReg_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [74:0] openmac_0_macreg_agent_rp_data;                                         // openmac_0_macReg_agent:rp_data -> router_004:sink_data
	wire         openmac_0_macreg_agent_rp_ready;                                        // router_004:sink_ready -> openmac_0_macReg_agent:rp_ready
	wire         openmac_0_mactimer_agent_rp_endofpacket;                                // openmac_0_macTimer_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         openmac_0_mactimer_agent_rp_valid;                                      // openmac_0_macTimer_agent:rp_valid -> router_005:sink_valid
	wire         openmac_0_mactimer_agent_rp_startofpacket;                              // openmac_0_macTimer_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [92:0] openmac_0_mactimer_agent_rp_data;                                       // openmac_0_macTimer_agent:rp_data -> router_005:sink_data
	wire         openmac_0_mactimer_agent_rp_ready;                                      // router_005:sink_ready -> openmac_0_macTimer_agent:rp_ready
	wire         router_005_src_endofpacket;                                             // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_005_src_valid;                                                   // router_005:src_valid -> rsp_demux_003:sink_valid
	wire         router_005_src_startofpacket;                                           // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [92:0] router_005_src_data;                                                    // router_005:src_data -> rsp_demux_003:sink_data
	wire   [5:0] router_005_src_channel;                                                 // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_ready;                                                   // rsp_demux_003:sink_ready -> router_005:src_ready
	wire         openmac_0_pktbuf_agent_rp_endofpacket;                                  // openmac_0_pktBuf_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         openmac_0_pktbuf_agent_rp_valid;                                        // openmac_0_pktBuf_agent:rp_valid -> router_006:sink_valid
	wire         openmac_0_pktbuf_agent_rp_startofpacket;                                // openmac_0_pktBuf_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [92:0] openmac_0_pktbuf_agent_rp_data;                                         // openmac_0_pktBuf_agent:rp_data -> router_006:sink_data
	wire         openmac_0_pktbuf_agent_rp_ready;                                        // router_006:sink_ready -> openmac_0_pktBuf_agent:rp_ready
	wire         router_006_src_endofpacket;                                             // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_006_src_valid;                                                   // router_006:src_valid -> rsp_demux_004:sink_valid
	wire         router_006_src_startofpacket;                                           // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [92:0] router_006_src_data;                                                    // router_006:src_data -> rsp_demux_004:sink_data
	wire   [5:0] router_006_src_channel;                                                 // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_ready;                                                   // rsp_demux_004:sink_ready -> router_006:src_ready
	wire         com_mem_s2_agent_rp_endofpacket;                                        // com_mem_s2_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         com_mem_s2_agent_rp_valid;                                              // com_mem_s2_agent:rp_valid -> router_007:sink_valid
	wire         com_mem_s2_agent_rp_startofpacket;                                      // com_mem_s2_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [92:0] com_mem_s2_agent_rp_data;                                               // com_mem_s2_agent:rp_data -> router_007:sink_data
	wire         com_mem_s2_agent_rp_ready;                                              // router_007:sink_ready -> com_mem_s2_agent:rp_ready
	wire         router_007_src_endofpacket;                                             // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_007_src_valid;                                                   // router_007:src_valid -> rsp_demux_005:sink_valid
	wire         router_007_src_startofpacket;                                           // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [92:0] router_007_src_data;                                                    // router_007:src_data -> rsp_demux_005:sink_data
	wire   [5:0] router_007_src_channel;                                                 // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_ready;                                                   // rsp_demux_005:sink_ready -> router_007:src_ready
	wire         router_src_endofpacket;                                                 // router:src_endofpacket -> host_0_lw_bridge_m0_limiter:cmd_sink_endofpacket
	wire         router_src_valid;                                                       // router:src_valid -> host_0_lw_bridge_m0_limiter:cmd_sink_valid
	wire         router_src_startofpacket;                                               // router:src_startofpacket -> host_0_lw_bridge_m0_limiter:cmd_sink_startofpacket
	wire  [92:0] router_src_data;                                                        // router:src_data -> host_0_lw_bridge_m0_limiter:cmd_sink_data
	wire   [5:0] router_src_channel;                                                     // router:src_channel -> host_0_lw_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_ready;                                                       // host_0_lw_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire         host_0_lw_bridge_m0_limiter_cmd_src_endofpacket;                        // host_0_lw_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         host_0_lw_bridge_m0_limiter_cmd_src_startofpacket;                      // host_0_lw_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [92:0] host_0_lw_bridge_m0_limiter_cmd_src_data;                               // host_0_lw_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire   [5:0] host_0_lw_bridge_m0_limiter_cmd_src_channel;                            // host_0_lw_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         host_0_lw_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> host_0_lw_bridge_m0_limiter:cmd_src_ready
	wire         rsp_mux_src_endofpacket;                                                // rsp_mux:src_endofpacket -> host_0_lw_bridge_m0_limiter:rsp_sink_endofpacket
	wire         rsp_mux_src_valid;                                                      // rsp_mux:src_valid -> host_0_lw_bridge_m0_limiter:rsp_sink_valid
	wire         rsp_mux_src_startofpacket;                                              // rsp_mux:src_startofpacket -> host_0_lw_bridge_m0_limiter:rsp_sink_startofpacket
	wire  [92:0] rsp_mux_src_data;                                                       // rsp_mux:src_data -> host_0_lw_bridge_m0_limiter:rsp_sink_data
	wire   [5:0] rsp_mux_src_channel;                                                    // rsp_mux:src_channel -> host_0_lw_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_ready;                                                      // host_0_lw_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire         host_0_lw_bridge_m0_limiter_rsp_src_endofpacket;                        // host_0_lw_bridge_m0_limiter:rsp_src_endofpacket -> host_0_lw_bridge_m0_agent:rp_endofpacket
	wire         host_0_lw_bridge_m0_limiter_rsp_src_valid;                              // host_0_lw_bridge_m0_limiter:rsp_src_valid -> host_0_lw_bridge_m0_agent:rp_valid
	wire         host_0_lw_bridge_m0_limiter_rsp_src_startofpacket;                      // host_0_lw_bridge_m0_limiter:rsp_src_startofpacket -> host_0_lw_bridge_m0_agent:rp_startofpacket
	wire  [92:0] host_0_lw_bridge_m0_limiter_rsp_src_data;                               // host_0_lw_bridge_m0_limiter:rsp_src_data -> host_0_lw_bridge_m0_agent:rp_data
	wire   [5:0] host_0_lw_bridge_m0_limiter_rsp_src_channel;                            // host_0_lw_bridge_m0_limiter:rsp_src_channel -> host_0_lw_bridge_m0_agent:rp_channel
	wire         host_0_lw_bridge_m0_limiter_rsp_src_ready;                              // host_0_lw_bridge_m0_agent:rp_ready -> host_0_lw_bridge_m0_limiter:rsp_src_ready
	wire         router_001_src_endofpacket;                                             // router_001:src_endofpacket -> pcp_0_slow_bridge_limiter:cmd_sink_endofpacket
	wire         router_001_src_valid;                                                   // router_001:src_valid -> pcp_0_slow_bridge_limiter:cmd_sink_valid
	wire         router_001_src_startofpacket;                                           // router_001:src_startofpacket -> pcp_0_slow_bridge_limiter:cmd_sink_startofpacket
	wire  [92:0] router_001_src_data;                                                    // router_001:src_data -> pcp_0_slow_bridge_limiter:cmd_sink_data
	wire   [5:0] router_001_src_channel;                                                 // router_001:src_channel -> pcp_0_slow_bridge_limiter:cmd_sink_channel
	wire         router_001_src_ready;                                                   // pcp_0_slow_bridge_limiter:cmd_sink_ready -> router_001:src_ready
	wire         pcp_0_slow_bridge_limiter_cmd_src_endofpacket;                          // pcp_0_slow_bridge_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         pcp_0_slow_bridge_limiter_cmd_src_startofpacket;                        // pcp_0_slow_bridge_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [92:0] pcp_0_slow_bridge_limiter_cmd_src_data;                                 // pcp_0_slow_bridge_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire   [5:0] pcp_0_slow_bridge_limiter_cmd_src_channel;                              // pcp_0_slow_bridge_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         pcp_0_slow_bridge_limiter_cmd_src_ready;                                // cmd_demux_001:sink_ready -> pcp_0_slow_bridge_limiter:cmd_src_ready
	wire         rsp_mux_001_src_endofpacket;                                            // rsp_mux_001:src_endofpacket -> pcp_0_slow_bridge_limiter:rsp_sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                  // rsp_mux_001:src_valid -> pcp_0_slow_bridge_limiter:rsp_sink_valid
	wire         rsp_mux_001_src_startofpacket;                                          // rsp_mux_001:src_startofpacket -> pcp_0_slow_bridge_limiter:rsp_sink_startofpacket
	wire  [92:0] rsp_mux_001_src_data;                                                   // rsp_mux_001:src_data -> pcp_0_slow_bridge_limiter:rsp_sink_data
	wire   [5:0] rsp_mux_001_src_channel;                                                // rsp_mux_001:src_channel -> pcp_0_slow_bridge_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_ready;                                                  // pcp_0_slow_bridge_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire         pcp_0_slow_bridge_limiter_rsp_src_endofpacket;                          // pcp_0_slow_bridge_limiter:rsp_src_endofpacket -> pcp_0_slow_bridge_agent:rp_endofpacket
	wire         pcp_0_slow_bridge_limiter_rsp_src_valid;                                // pcp_0_slow_bridge_limiter:rsp_src_valid -> pcp_0_slow_bridge_agent:rp_valid
	wire         pcp_0_slow_bridge_limiter_rsp_src_startofpacket;                        // pcp_0_slow_bridge_limiter:rsp_src_startofpacket -> pcp_0_slow_bridge_agent:rp_startofpacket
	wire  [92:0] pcp_0_slow_bridge_limiter_rsp_src_data;                                 // pcp_0_slow_bridge_limiter:rsp_src_data -> pcp_0_slow_bridge_agent:rp_data
	wire   [5:0] pcp_0_slow_bridge_limiter_rsp_src_channel;                              // pcp_0_slow_bridge_limiter:rsp_src_channel -> pcp_0_slow_bridge_agent:rp_channel
	wire         pcp_0_slow_bridge_limiter_rsp_src_ready;                                // pcp_0_slow_bridge_agent:rp_ready -> pcp_0_slow_bridge_limiter:rsp_src_ready
	wire         openmac_0_macreg_burst_adapter_source0_endofpacket;                     // openmac_0_macReg_burst_adapter:source0_endofpacket -> openmac_0_macReg_agent:cp_endofpacket
	wire         openmac_0_macreg_burst_adapter_source0_valid;                           // openmac_0_macReg_burst_adapter:source0_valid -> openmac_0_macReg_agent:cp_valid
	wire         openmac_0_macreg_burst_adapter_source0_startofpacket;                   // openmac_0_macReg_burst_adapter:source0_startofpacket -> openmac_0_macReg_agent:cp_startofpacket
	wire  [74:0] openmac_0_macreg_burst_adapter_source0_data;                            // openmac_0_macReg_burst_adapter:source0_data -> openmac_0_macReg_agent:cp_data
	wire         openmac_0_macreg_burst_adapter_source0_ready;                           // openmac_0_macReg_agent:cp_ready -> openmac_0_macReg_burst_adapter:source0_ready
	wire   [5:0] openmac_0_macreg_burst_adapter_source0_channel;                         // openmac_0_macReg_burst_adapter:source0_channel -> openmac_0_macReg_agent:cp_channel
	wire         cmd_demux_src0_endofpacket;                                             // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                   // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                           // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [92:0] cmd_demux_src0_data;                                                    // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [5:0] cmd_demux_src0_channel;                                                 // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                   // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                             // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                   // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                           // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [92:0] cmd_demux_src1_data;                                                    // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [5:0] cmd_demux_src1_channel;                                                 // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                                   // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_001_src0_endofpacket;                                         // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src0_valid;                                               // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire         cmd_demux_001_src0_startofpacket;                                       // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [92:0] cmd_demux_001_src0_data;                                                // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire   [5:0] cmd_demux_001_src0_channel;                                             // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_ready;                                               // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire         cmd_demux_001_src1_endofpacket;                                         // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_001_src1_valid;                                               // cmd_demux_001:src1_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_001_src1_startofpacket;                                       // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [92:0] cmd_demux_001_src1_data;                                                // cmd_demux_001:src1_data -> cmd_mux_002:sink0_data
	wire   [5:0] cmd_demux_001_src1_channel;                                             // cmd_demux_001:src1_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_001_src1_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux_001:src1_ready
	wire         cmd_demux_001_src2_endofpacket;                                         // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_001_src2_valid;                                               // cmd_demux_001:src2_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_001_src2_startofpacket;                                       // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [92:0] cmd_demux_001_src2_data;                                                // cmd_demux_001:src2_data -> cmd_mux_003:sink0_data
	wire   [5:0] cmd_demux_001_src2_channel;                                             // cmd_demux_001:src2_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_001_src2_ready;                                               // cmd_mux_003:sink0_ready -> cmd_demux_001:src2_ready
	wire         cmd_demux_001_src4_endofpacket;                                         // cmd_demux_001:src4_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_001_src4_valid;                                               // cmd_demux_001:src4_valid -> cmd_mux_005:sink0_valid
	wire         cmd_demux_001_src4_startofpacket;                                       // cmd_demux_001:src4_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [92:0] cmd_demux_001_src4_data;                                                // cmd_demux_001:src4_data -> cmd_mux_005:sink0_data
	wire   [5:0] cmd_demux_001_src4_channel;                                             // cmd_demux_001:src4_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_001_src4_ready;                                               // cmd_mux_005:sink0_ready -> cmd_demux_001:src4_ready
	wire         rsp_demux_src0_endofpacket;                                             // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                   // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                           // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [92:0] rsp_demux_src0_data;                                                    // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [5:0] rsp_demux_src0_channel;                                                 // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                   // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_src1_endofpacket;                                             // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                   // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire         rsp_demux_src1_startofpacket;                                           // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [92:0] rsp_demux_src1_data;                                                    // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire   [5:0] rsp_demux_src1_channel;                                                 // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_ready;                                                   // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire         rsp_demux_001_src0_endofpacket;                                         // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                               // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                       // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [92:0] rsp_demux_001_src0_data;                                                // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [5:0] rsp_demux_001_src0_channel;                                             // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                               // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_002_src0_endofpacket;                                         // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                               // rsp_demux_002:src0_valid -> rsp_mux_001:sink1_valid
	wire         rsp_demux_002_src0_startofpacket;                                       // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [92:0] rsp_demux_002_src0_data;                                                // rsp_demux_002:src0_data -> rsp_mux_001:sink1_data
	wire   [5:0] rsp_demux_002_src0_channel;                                             // rsp_demux_002:src0_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_002_src0_ready;                                               // rsp_mux_001:sink1_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                         // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                               // rsp_demux_003:src0_valid -> rsp_mux_001:sink2_valid
	wire         rsp_demux_003_src0_startofpacket;                                       // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [92:0] rsp_demux_003_src0_data;                                                // rsp_demux_003:src0_data -> rsp_mux_001:sink2_data
	wire   [5:0] rsp_demux_003_src0_channel;                                             // rsp_demux_003:src0_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_003_src0_ready;                                               // rsp_mux_001:sink2_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_005_src0_endofpacket;                                         // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                               // rsp_demux_005:src0_valid -> rsp_mux_001:sink4_valid
	wire         rsp_demux_005_src0_startofpacket;                                       // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [92:0] rsp_demux_005_src0_data;                                                // rsp_demux_005:src0_data -> rsp_mux_001:sink4_data
	wire   [5:0] rsp_demux_005_src0_channel;                                             // rsp_demux_005:src0_channel -> rsp_mux_001:sink4_channel
	wire         rsp_demux_005_src0_ready;                                               // rsp_mux_001:sink4_ready -> rsp_demux_005:src0_ready
	wire         router_004_src_endofpacket;                                             // router_004:src_endofpacket -> openmac_0_macReg_rsp_width_adapter:in_endofpacket
	wire         router_004_src_valid;                                                   // router_004:src_valid -> openmac_0_macReg_rsp_width_adapter:in_valid
	wire         router_004_src_startofpacket;                                           // router_004:src_startofpacket -> openmac_0_macReg_rsp_width_adapter:in_startofpacket
	wire  [74:0] router_004_src_data;                                                    // router_004:src_data -> openmac_0_macReg_rsp_width_adapter:in_data
	wire   [5:0] router_004_src_channel;                                                 // router_004:src_channel -> openmac_0_macReg_rsp_width_adapter:in_channel
	wire         router_004_src_ready;                                                   // openmac_0_macReg_rsp_width_adapter:in_ready -> router_004:src_ready
	wire         openmac_0_macreg_rsp_width_adapter_src_endofpacket;                     // openmac_0_macReg_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         openmac_0_macreg_rsp_width_adapter_src_valid;                           // openmac_0_macReg_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire         openmac_0_macreg_rsp_width_adapter_src_startofpacket;                   // openmac_0_macReg_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [92:0] openmac_0_macreg_rsp_width_adapter_src_data;                            // openmac_0_macReg_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire         openmac_0_macreg_rsp_width_adapter_src_ready;                           // rsp_demux_002:sink_ready -> openmac_0_macReg_rsp_width_adapter:out_ready
	wire   [5:0] openmac_0_macreg_rsp_width_adapter_src_channel;                         // openmac_0_macReg_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire         cmd_mux_002_src_endofpacket;                                            // cmd_mux_002:src_endofpacket -> openmac_0_macReg_cmd_width_adapter:in_endofpacket
	wire         cmd_mux_002_src_valid;                                                  // cmd_mux_002:src_valid -> openmac_0_macReg_cmd_width_adapter:in_valid
	wire         cmd_mux_002_src_startofpacket;                                          // cmd_mux_002:src_startofpacket -> openmac_0_macReg_cmd_width_adapter:in_startofpacket
	wire  [92:0] cmd_mux_002_src_data;                                                   // cmd_mux_002:src_data -> openmac_0_macReg_cmd_width_adapter:in_data
	wire   [5:0] cmd_mux_002_src_channel;                                                // cmd_mux_002:src_channel -> openmac_0_macReg_cmd_width_adapter:in_channel
	wire         cmd_mux_002_src_ready;                                                  // openmac_0_macReg_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire         openmac_0_macreg_cmd_width_adapter_src_endofpacket;                     // openmac_0_macReg_cmd_width_adapter:out_endofpacket -> openmac_0_macReg_burst_adapter:sink0_endofpacket
	wire         openmac_0_macreg_cmd_width_adapter_src_valid;                           // openmac_0_macReg_cmd_width_adapter:out_valid -> openmac_0_macReg_burst_adapter:sink0_valid
	wire         openmac_0_macreg_cmd_width_adapter_src_startofpacket;                   // openmac_0_macReg_cmd_width_adapter:out_startofpacket -> openmac_0_macReg_burst_adapter:sink0_startofpacket
	wire  [74:0] openmac_0_macreg_cmd_width_adapter_src_data;                            // openmac_0_macReg_cmd_width_adapter:out_data -> openmac_0_macReg_burst_adapter:sink0_data
	wire         openmac_0_macreg_cmd_width_adapter_src_ready;                           // openmac_0_macReg_burst_adapter:sink0_ready -> openmac_0_macReg_cmd_width_adapter:out_ready
	wire   [5:0] openmac_0_macreg_cmd_width_adapter_src_channel;                         // openmac_0_macReg_cmd_width_adapter:out_channel -> openmac_0_macReg_burst_adapter:sink0_channel
	wire         cmd_demux_001_src3_endofpacket;                                         // cmd_demux_001:src3_endofpacket -> crosser:in_endofpacket
	wire         cmd_demux_001_src3_valid;                                               // cmd_demux_001:src3_valid -> crosser:in_valid
	wire         cmd_demux_001_src3_startofpacket;                                       // cmd_demux_001:src3_startofpacket -> crosser:in_startofpacket
	wire  [92:0] cmd_demux_001_src3_data;                                                // cmd_demux_001:src3_data -> crosser:in_data
	wire   [5:0] cmd_demux_001_src3_channel;                                             // cmd_demux_001:src3_channel -> crosser:in_channel
	wire         cmd_demux_001_src3_ready;                                               // crosser:in_ready -> cmd_demux_001:src3_ready
	wire         crosser_out_endofpacket;                                                // crosser:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         crosser_out_valid;                                                      // crosser:out_valid -> cmd_mux_004:sink0_valid
	wire         crosser_out_startofpacket;                                              // crosser:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [92:0] crosser_out_data;                                                       // crosser:out_data -> cmd_mux_004:sink0_data
	wire   [5:0] crosser_out_channel;                                                    // crosser:out_channel -> cmd_mux_004:sink0_channel
	wire         crosser_out_ready;                                                      // cmd_mux_004:sink0_ready -> crosser:out_ready
	wire         rsp_demux_004_src0_endofpacket;                                         // rsp_demux_004:src0_endofpacket -> crosser_001:in_endofpacket
	wire         rsp_demux_004_src0_valid;                                               // rsp_demux_004:src0_valid -> crosser_001:in_valid
	wire         rsp_demux_004_src0_startofpacket;                                       // rsp_demux_004:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [92:0] rsp_demux_004_src0_data;                                                // rsp_demux_004:src0_data -> crosser_001:in_data
	wire   [5:0] rsp_demux_004_src0_channel;                                             // rsp_demux_004:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_004_src0_ready;                                               // crosser_001:in_ready -> rsp_demux_004:src0_ready
	wire         crosser_001_out_endofpacket;                                            // crosser_001:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire         crosser_001_out_valid;                                                  // crosser_001:out_valid -> rsp_mux_001:sink3_valid
	wire         crosser_001_out_startofpacket;                                          // crosser_001:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [92:0] crosser_001_out_data;                                                   // crosser_001:out_data -> rsp_mux_001:sink3_data
	wire   [5:0] crosser_001_out_channel;                                                // crosser_001:out_channel -> rsp_mux_001:sink3_channel
	wire         crosser_001_out_ready;                                                  // rsp_mux_001:sink3_ready -> crosser_001:out_ready
	wire   [5:0] host_0_lw_bridge_m0_limiter_cmd_valid_data;                             // host_0_lw_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [5:0] pcp_0_slow_bridge_limiter_cmd_valid_data;                               // pcp_0_slow_bridge_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) host_0_lw_bridge_m0_translator (
		.clk                      (clk_50_clk_clk),                                                         //                       clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address              (host_0_lw_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (host_0_lw_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (host_0_lw_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (host_0_lw_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (host_0_lw_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (host_0_lw_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (host_0_lw_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (host_0_lw_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (host_0_lw_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (host_0_lw_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (host_0_lw_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (host_0_lw_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (host_0_lw_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (host_0_lw_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (host_0_lw_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                  (host_0_lw_bridge_m0_read),                                               //                          .read
		.av_readdata              (host_0_lw_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (host_0_lw_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (host_0_lw_bridge_m0_write),                                              //                          .write
		.av_writedata             (host_0_lw_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (host_0_lw_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                   //               (terminated)
		.av_begintransfer         (1'b0),                                                                   //               (terminated)
		.av_chipselect            (1'b0),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                                   //               (terminated)
		.uav_clken                (),                                                                       //               (terminated)
		.av_clken                 (1'b1),                                                                   //               (terminated)
		.uav_response             (2'b00),                                                                  //               (terminated)
		.av_response              (),                                                                       //               (terminated)
		.uav_writeresponserequest (),                                                                       //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                   //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid    ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcp_0_slow_bridge_translator (
		.clk                      (clk_50_clk_clk),                                                       //                       clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address              (pcp_0_slow_bridge_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcp_0_slow_bridge_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcp_0_slow_bridge_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcp_0_slow_bridge_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcp_0_slow_bridge_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcp_0_slow_bridge_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcp_0_slow_bridge_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcp_0_slow_bridge_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcp_0_slow_bridge_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcp_0_slow_bridge_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcp_0_slow_bridge_byteenable),                                         //                          .byteenable
		.av_read                  (pcp_0_slow_bridge_read),                                               //                          .read
		.av_readdata              (pcp_0_slow_bridge_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcp_0_slow_bridge_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcp_0_slow_bridge_write),                                              //                          .write
		.av_writedata             (pcp_0_slow_bridge_writedata),                                          //                          .writedata
		.av_debugaccess           (pcp_0_slow_bridge_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                      (clk_50_clk_clk),                                  //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address              (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write                (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata              (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write                 (),                                                //              (terminated)
		.av_read                  (),                                                //              (terminated)
		.av_writedata             (),                                                //              (terminated)
		.av_begintransfer         (),                                                //              (terminated)
		.av_beginbursttransfer    (),                                                //              (terminated)
		.av_burstcount            (),                                                //              (terminated)
		.av_byteenable            (),                                                //              (terminated)
		.av_readdatavalid         (1'b0),                                            //              (terminated)
		.av_waitrequest           (1'b0),                                            //              (terminated)
		.av_writebyteenable       (),                                                //              (terminated)
		.av_lock                  (),                                                //              (terminated)
		.av_chipselect            (),                                                //              (terminated)
		.av_clken                 (),                                                //              (terminated)
		.uav_clken                (1'b0),                                            //              (terminated)
		.av_debugaccess           (),                                                //              (terminated)
		.av_outputenable          (),                                                //              (terminated)
		.uav_response             (),                                                //              (terminated)
		.av_response              (2'b00),                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                //              (terminated)
		.av_writeresponserequest  (),                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) com_mem_s1_translator (
		.clk                      (clk_50_clk_clk),                               //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (com_mem_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (com_mem_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (com_mem_s1_agent_m0_read),                     //                         .read
		.uav_write                (com_mem_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest          (com_mem_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (com_mem_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (com_mem_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (com_mem_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (com_mem_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (com_mem_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (com_mem_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (com_mem_s1_address),                           //      avalon_anti_slave_0.address
		.av_write                 (com_mem_s1_write),                             //                         .write
		.av_readdata              (com_mem_s1_readdata),                          //                         .readdata
		.av_writedata             (com_mem_s1_writedata),                         //                         .writedata
		.av_byteenable            (com_mem_s1_byteenable),                        //                         .byteenable
		.av_chipselect            (com_mem_s1_chipselect),                        //                         .chipselect
		.av_clken                 (com_mem_s1_clken),                             //                         .clken
		.av_read                  (),                                             //              (terminated)
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_waitrequest           (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_debugaccess           (),                                             //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) openmac_0_macreg_translator (
		.clk                      (clk_50_clk_clk),                               //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (openmac_0_macreg_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount           (openmac_0_macreg_agent_m0_burstcount),         //                         .burstcount
		.uav_read                 (openmac_0_macreg_agent_m0_read),               //                         .read
		.uav_write                (openmac_0_macreg_agent_m0_write),              //                         .write
		.uav_waitrequest          (openmac_0_macreg_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid        (openmac_0_macreg_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable           (openmac_0_macreg_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata             (openmac_0_macreg_agent_m0_readdata),           //                         .readdata
		.uav_writedata            (openmac_0_macreg_agent_m0_writedata),          //                         .writedata
		.uav_lock                 (openmac_0_macreg_agent_m0_lock),               //                         .lock
		.uav_debugaccess          (openmac_0_macreg_agent_m0_debugaccess),        //                         .debugaccess
		.av_address               (openmac_0_macReg_address),                     //      avalon_anti_slave_0.address
		.av_write                 (openmac_0_macReg_write),                       //                         .write
		.av_read                  (openmac_0_macReg_read),                        //                         .read
		.av_readdata              (openmac_0_macReg_readdata),                    //                         .readdata
		.av_writedata             (openmac_0_macReg_writedata),                   //                         .writedata
		.av_byteenable            (openmac_0_macReg_byteenable),                  //                         .byteenable
		.av_waitrequest           (openmac_0_macReg_waitrequest),                 //                         .waitrequest
		.av_chipselect            (openmac_0_macReg_chipselect),                  //                         .chipselect
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_debugaccess           (),                                             //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) openmac_0_mactimer_translator (
		.clk                      (clk_50_clk_clk),                               //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (openmac_0_mactimer_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (openmac_0_mactimer_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (openmac_0_mactimer_agent_m0_read),             //                         .read
		.uav_write                (openmac_0_mactimer_agent_m0_write),            //                         .write
		.uav_waitrequest          (openmac_0_mactimer_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (openmac_0_mactimer_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (openmac_0_mactimer_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (openmac_0_mactimer_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (openmac_0_mactimer_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (openmac_0_mactimer_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (openmac_0_mactimer_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (openmac_0_macTimer_address),                   //      avalon_anti_slave_0.address
		.av_write                 (openmac_0_macTimer_write),                     //                         .write
		.av_read                  (openmac_0_macTimer_read),                      //                         .read
		.av_readdata              (openmac_0_macTimer_readdata),                  //                         .readdata
		.av_writedata             (openmac_0_macTimer_writedata),                 //                         .writedata
		.av_byteenable            (openmac_0_macTimer_byteenable),                //                         .byteenable
		.av_waitrequest           (openmac_0_macTimer_waitrequest),               //                         .waitrequest
		.av_chipselect            (openmac_0_macTimer_chipselect),                //                         .chipselect
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_debugaccess           (),                                             //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) openmac_0_pktbuf_translator (
		.clk                      (clk_100_outclk0_clk),                                           //                      clk.clk
		.reset                    (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (openmac_0_pktbuf_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount           (openmac_0_pktbuf_agent_m0_burstcount),                          //                         .burstcount
		.uav_read                 (openmac_0_pktbuf_agent_m0_read),                                //                         .read
		.uav_write                (openmac_0_pktbuf_agent_m0_write),                               //                         .write
		.uav_waitrequest          (openmac_0_pktbuf_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid        (openmac_0_pktbuf_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable           (openmac_0_pktbuf_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata             (openmac_0_pktbuf_agent_m0_readdata),                            //                         .readdata
		.uav_writedata            (openmac_0_pktbuf_agent_m0_writedata),                           //                         .writedata
		.uav_lock                 (openmac_0_pktbuf_agent_m0_lock),                                //                         .lock
		.uav_debugaccess          (openmac_0_pktbuf_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address               (openmac_0_pktBuf_address),                                      //      avalon_anti_slave_0.address
		.av_write                 (openmac_0_pktBuf_write),                                        //                         .write
		.av_read                  (openmac_0_pktBuf_read),                                         //                         .read
		.av_readdata              (openmac_0_pktBuf_readdata),                                     //                         .readdata
		.av_writedata             (openmac_0_pktBuf_writedata),                                    //                         .writedata
		.av_byteenable            (openmac_0_pktBuf_byteenable),                                   //                         .byteenable
		.av_waitrequest           (openmac_0_pktBuf_waitrequest),                                  //                         .waitrequest
		.av_chipselect            (openmac_0_pktBuf_chipselect),                                   //                         .chipselect
		.av_begintransfer         (),                                                              //              (terminated)
		.av_beginbursttransfer    (),                                                              //              (terminated)
		.av_burstcount            (),                                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                                          //              (terminated)
		.av_writebyteenable       (),                                                              //              (terminated)
		.av_lock                  (),                                                              //              (terminated)
		.av_clken                 (),                                                              //              (terminated)
		.uav_clken                (1'b0),                                                          //              (terminated)
		.av_debugaccess           (),                                                              //              (terminated)
		.av_outputenable          (),                                                              //              (terminated)
		.uav_response             (),                                                              //              (terminated)
		.av_response              (2'b00),                                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                                          //              (terminated)
		.uav_writeresponsevalid   (),                                                              //              (terminated)
		.av_writeresponserequest  (),                                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) com_mem_s2_translator (
		.clk                      (clk_50_clk_clk),                               //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (com_mem_s2_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (com_mem_s2_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (com_mem_s2_agent_m0_read),                     //                         .read
		.uav_write                (com_mem_s2_agent_m0_write),                    //                         .write
		.uav_waitrequest          (com_mem_s2_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (com_mem_s2_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (com_mem_s2_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (com_mem_s2_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (com_mem_s2_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (com_mem_s2_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (com_mem_s2_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (com_mem_s2_address),                           //      avalon_anti_slave_0.address
		.av_write                 (com_mem_s2_write),                             //                         .write
		.av_readdata              (com_mem_s2_readdata),                          //                         .readdata
		.av_writedata             (com_mem_s2_writedata),                         //                         .writedata
		.av_byteenable            (com_mem_s2_byteenable),                        //                         .byteenable
		.av_chipselect            (com_mem_s2_chipselect),                        //                         .chipselect
		.av_clken                 (com_mem_s2_clken),                             //                         .clken
		.av_read                  (),                                             //              (terminated)
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_waitrequest           (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_debugaccess           (),                                             //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BEGIN_BURST           (72),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (80),
		.PKT_THREAD_ID_L           (80),
		.PKT_CACHE_H               (87),
		.PKT_CACHE_L               (84),
		.PKT_DATA_SIDEBAND_H       (71),
		.PKT_DATA_SIDEBAND_L       (71),
		.PKT_QOS_H                 (73),
		.PKT_QOS_L                 (73),
		.PKT_ADDR_SIDEBAND_H       (70),
		.PKT_ADDR_SIDEBAND_L       (70),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) host_0_lw_bridge_m0_agent (
		.clk                     (clk_50_clk_clk),                                                         //       clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address              (host_0_lw_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (host_0_lw_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (host_0_lw_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (host_0_lw_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (host_0_lw_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (host_0_lw_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (host_0_lw_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (host_0_lw_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (host_0_lw_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (host_0_lw_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (host_0_lw_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (host_0_lw_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (host_0_lw_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (host_0_lw_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (host_0_lw_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (host_0_lw_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid                (host_0_lw_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (host_0_lw_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (host_0_lw_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (host_0_lw_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (host_0_lw_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (host_0_lw_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                       // (terminated)
		.av_writeresponserequest (1'b0),                                                                   // (terminated)
		.av_writeresponsevalid   ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BEGIN_BURST           (72),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (80),
		.PKT_THREAD_ID_L           (80),
		.PKT_CACHE_H               (87),
		.PKT_CACHE_L               (84),
		.PKT_DATA_SIDEBAND_H       (71),
		.PKT_DATA_SIDEBAND_L       (71),
		.PKT_QOS_H                 (73),
		.PKT_QOS_L                 (73),
		.PKT_ADDR_SIDEBAND_H       (70),
		.PKT_ADDR_SIDEBAND_L       (70),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcp_0_slow_bridge_agent (
		.clk                     (clk_50_clk_clk),                                                       //       clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address              (pcp_0_slow_bridge_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcp_0_slow_bridge_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcp_0_slow_bridge_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcp_0_slow_bridge_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcp_0_slow_bridge_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcp_0_slow_bridge_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcp_0_slow_bridge_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcp_0_slow_bridge_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcp_0_slow_bridge_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcp_0_slow_bridge_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcp_0_slow_bridge_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcp_0_slow_bridge_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcp_0_slow_bridge_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcp_0_slow_bridge_agent_cp_ready),                                     //          .ready
		.rp_valid                (pcp_0_slow_bridge_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (pcp_0_slow_bridge_limiter_rsp_src_data),                               //          .data
		.rp_channel              (pcp_0_slow_bridge_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (pcp_0_slow_bridge_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (pcp_0_slow_bridge_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (pcp_0_slow_bridge_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (72),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_50_clk_clk),                                            //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (72),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) com_mem_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (com_mem_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (com_mem_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (com_mem_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (com_mem_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (com_mem_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (com_mem_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (com_mem_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (com_mem_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (com_mem_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (com_mem_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (com_mem_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (com_mem_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (com_mem_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (com_mem_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (com_mem_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (com_mem_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                      //                .channel
		.rf_sink_ready           (com_mem_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (com_mem_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (com_mem_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (com_mem_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (com_mem_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (com_mem_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (com_mem_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (com_mem_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (com_mem_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (com_mem_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (com_mem_s1_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (com_mem_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (com_mem_s1_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (com_mem_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (com_mem_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (com_mem_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) com_mem_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (com_mem_s1_agent_rf_source_data),              //        in.data
		.in_valid          (com_mem_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (com_mem_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (com_mem_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (com_mem_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (com_mem_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (com_mem_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (com_mem_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (com_mem_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (com_mem_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (54),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (36),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (37),
		.PKT_TRANS_POSTED          (38),
		.PKT_TRANS_WRITE           (39),
		.PKT_TRANS_READ            (40),
		.PKT_TRANS_LOCK            (41),
		.PKT_SRC_ID_H              (58),
		.PKT_SRC_ID_L              (56),
		.PKT_DEST_ID_H             (61),
		.PKT_DEST_ID_L             (59),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (46),
		.PKT_BYTE_CNT_H            (45),
		.PKT_BYTE_CNT_L            (43),
		.PKT_PROTECTION_H          (65),
		.PKT_PROTECTION_L          (63),
		.PKT_RESPONSE_STATUS_H     (71),
		.PKT_RESPONSE_STATUS_L     (70),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_ORI_BURST_SIZE_L      (72),
		.PKT_ORI_BURST_SIZE_H      (74),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (75),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) openmac_0_macreg_agent (
		.clk                     (clk_50_clk_clk),                                       //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (openmac_0_macreg_agent_m0_address),                    //              m0.address
		.m0_burstcount           (openmac_0_macreg_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (openmac_0_macreg_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (openmac_0_macreg_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (openmac_0_macreg_agent_m0_lock),                       //                .lock
		.m0_readdata             (openmac_0_macreg_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (openmac_0_macreg_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (openmac_0_macreg_agent_m0_read),                       //                .read
		.m0_waitrequest          (openmac_0_macreg_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (openmac_0_macreg_agent_m0_writedata),                  //                .writedata
		.m0_write                (openmac_0_macreg_agent_m0_write),                      //                .write
		.rp_endofpacket          (openmac_0_macreg_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (openmac_0_macreg_agent_rp_ready),                      //                .ready
		.rp_valid                (openmac_0_macreg_agent_rp_valid),                      //                .valid
		.rp_data                 (openmac_0_macreg_agent_rp_data),                       //                .data
		.rp_startofpacket        (openmac_0_macreg_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (openmac_0_macreg_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (openmac_0_macreg_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (openmac_0_macreg_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (openmac_0_macreg_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (openmac_0_macreg_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (openmac_0_macreg_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (openmac_0_macreg_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (openmac_0_macreg_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (openmac_0_macreg_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (openmac_0_macreg_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (openmac_0_macreg_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (openmac_0_macreg_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (openmac_0_macreg_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (openmac_0_macreg_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (openmac_0_macreg_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (openmac_0_macreg_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (openmac_0_macreg_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (openmac_0_macreg_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (openmac_0_macreg_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (openmac_0_macreg_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (openmac_0_macreg_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (openmac_0_macreg_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (76),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) openmac_0_macreg_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                    //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (openmac_0_macreg_agent_rf_source_data),             //        in.data
		.in_valid          (openmac_0_macreg_agent_rf_source_valid),            //          .valid
		.in_ready          (openmac_0_macreg_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (openmac_0_macreg_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (openmac_0_macreg_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (openmac_0_macreg_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (openmac_0_macreg_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (openmac_0_macreg_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (openmac_0_macreg_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (openmac_0_macreg_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (72),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) openmac_0_mactimer_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (openmac_0_mactimer_agent_m0_address),                 //              m0.address
		.m0_burstcount           (openmac_0_mactimer_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (openmac_0_mactimer_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (openmac_0_mactimer_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (openmac_0_mactimer_agent_m0_lock),                    //                .lock
		.m0_readdata             (openmac_0_mactimer_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (openmac_0_mactimer_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (openmac_0_mactimer_agent_m0_read),                    //                .read
		.m0_waitrequest          (openmac_0_mactimer_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (openmac_0_mactimer_agent_m0_writedata),               //                .writedata
		.m0_write                (openmac_0_mactimer_agent_m0_write),                   //                .write
		.rp_endofpacket          (openmac_0_mactimer_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (openmac_0_mactimer_agent_rp_ready),                   //                .ready
		.rp_valid                (openmac_0_mactimer_agent_rp_valid),                   //                .valid
		.rp_data                 (openmac_0_mactimer_agent_rp_data),                    //                .data
		.rp_startofpacket        (openmac_0_mactimer_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                             //                .channel
		.rf_sink_ready           (openmac_0_mactimer_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (openmac_0_mactimer_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (openmac_0_mactimer_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (openmac_0_mactimer_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (openmac_0_mactimer_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (openmac_0_mactimer_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (openmac_0_mactimer_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (openmac_0_mactimer_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (openmac_0_mactimer_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (openmac_0_mactimer_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (openmac_0_mactimer_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (openmac_0_mactimer_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (openmac_0_mactimer_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (openmac_0_mactimer_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (openmac_0_mactimer_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (openmac_0_mactimer_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) openmac_0_mactimer_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (openmac_0_mactimer_agent_rf_source_data),             //        in.data
		.in_valid          (openmac_0_mactimer_agent_rf_source_valid),            //          .valid
		.in_ready          (openmac_0_mactimer_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (openmac_0_mactimer_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (openmac_0_mactimer_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (openmac_0_mactimer_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (openmac_0_mactimer_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (openmac_0_mactimer_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (openmac_0_mactimer_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (openmac_0_mactimer_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (72),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) openmac_0_pktbuf_agent (
		.clk                     (clk_100_outclk0_clk),                                           //             clk.clk
		.reset                   (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (openmac_0_pktbuf_agent_m0_address),                             //              m0.address
		.m0_burstcount           (openmac_0_pktbuf_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (openmac_0_pktbuf_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (openmac_0_pktbuf_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (openmac_0_pktbuf_agent_m0_lock),                                //                .lock
		.m0_readdata             (openmac_0_pktbuf_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (openmac_0_pktbuf_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (openmac_0_pktbuf_agent_m0_read),                                //                .read
		.m0_waitrequest          (openmac_0_pktbuf_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (openmac_0_pktbuf_agent_m0_writedata),                           //                .writedata
		.m0_write                (openmac_0_pktbuf_agent_m0_write),                               //                .write
		.rp_endofpacket          (openmac_0_pktbuf_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (openmac_0_pktbuf_agent_rp_ready),                               //                .ready
		.rp_valid                (openmac_0_pktbuf_agent_rp_valid),                               //                .valid
		.rp_data                 (openmac_0_pktbuf_agent_rp_data),                                //                .data
		.rp_startofpacket        (openmac_0_pktbuf_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                       //                .channel
		.rf_sink_ready           (openmac_0_pktbuf_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (openmac_0_pktbuf_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (openmac_0_pktbuf_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (openmac_0_pktbuf_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (openmac_0_pktbuf_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (openmac_0_pktbuf_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (openmac_0_pktbuf_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (openmac_0_pktbuf_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (openmac_0_pktbuf_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (openmac_0_pktbuf_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (openmac_0_pktbuf_agent_rdata_fifo_out_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (openmac_0_pktbuf_agent_rdata_fifo_out_valid),                   //                .valid
		.rdata_fifo_sink_data    (openmac_0_pktbuf_agent_rdata_fifo_out_data),                    //                .data
		.rdata_fifo_src_ready    (openmac_0_pktbuf_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (openmac_0_pktbuf_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (openmac_0_pktbuf_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponserequest (),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) openmac_0_pktbuf_agent_rsp_fifo (
		.clk               (clk_100_outclk0_clk),                                           //       clk.clk
		.reset             (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (openmac_0_pktbuf_agent_rf_source_data),                         //        in.data
		.in_valid          (openmac_0_pktbuf_agent_rf_source_valid),                        //          .valid
		.in_ready          (openmac_0_pktbuf_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (openmac_0_pktbuf_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (openmac_0_pktbuf_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (openmac_0_pktbuf_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (openmac_0_pktbuf_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (openmac_0_pktbuf_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (openmac_0_pktbuf_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (openmac_0_pktbuf_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) openmac_0_pktbuf_agent_rdata_fifo (
		.clk               (clk_100_outclk0_clk),                                           //       clk.clk
		.reset             (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (openmac_0_pktbuf_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (openmac_0_pktbuf_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (openmac_0_pktbuf_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (openmac_0_pktbuf_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (openmac_0_pktbuf_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (openmac_0_pktbuf_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                          // (terminated)
		.out_startofpacket (),                                                              // (terminated)
		.out_endofpacket   (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (72),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_ORI_BURST_SIZE_H      (92),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) com_mem_s2_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (com_mem_s2_agent_m0_address),                  //              m0.address
		.m0_burstcount           (com_mem_s2_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (com_mem_s2_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (com_mem_s2_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (com_mem_s2_agent_m0_lock),                     //                .lock
		.m0_readdata             (com_mem_s2_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (com_mem_s2_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (com_mem_s2_agent_m0_read),                     //                .read
		.m0_waitrequest          (com_mem_s2_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (com_mem_s2_agent_m0_writedata),                //                .writedata
		.m0_write                (com_mem_s2_agent_m0_write),                    //                .write
		.rp_endofpacket          (com_mem_s2_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (com_mem_s2_agent_rp_ready),                    //                .ready
		.rp_valid                (com_mem_s2_agent_rp_valid),                    //                .valid
		.rp_data                 (com_mem_s2_agent_rp_data),                     //                .data
		.rp_startofpacket        (com_mem_s2_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_005_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                      //                .channel
		.rf_sink_ready           (com_mem_s2_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (com_mem_s2_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (com_mem_s2_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (com_mem_s2_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (com_mem_s2_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (com_mem_s2_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (com_mem_s2_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (com_mem_s2_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (com_mem_s2_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (com_mem_s2_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (com_mem_s2_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (com_mem_s2_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (com_mem_s2_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (com_mem_s2_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (com_mem_s2_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (com_mem_s2_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) com_mem_s2_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (com_mem_s2_agent_rf_source_data),              //        in.data
		.in_valid          (com_mem_s2_agent_rf_source_valid),             //          .valid
		.in_ready          (com_mem_s2_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (com_mem_s2_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (com_mem_s2_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (com_mem_s2_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (com_mem_s2_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (com_mem_s2_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (com_mem_s2_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (com_mem_s2_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (host_0_lw_bridge_m0_agent_cp_ready),           //      sink.ready
		.sink_valid         (host_0_lw_bridge_m0_agent_cp_valid),           //          .valid
		.sink_data          (host_0_lw_bridge_m0_agent_cp_data),            //          .data
		.sink_startofpacket (host_0_lw_bridge_m0_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (host_0_lw_bridge_m0_agent_cp_endofpacket),     //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (pcp_0_slow_bridge_agent_cp_ready),             //      sink.ready
		.sink_valid         (pcp_0_slow_bridge_agent_cp_valid),             //          .valid
		.sink_data          (pcp_0_slow_bridge_agent_cp_data),              //          .data
		.sink_startofpacket (pcp_0_slow_bridge_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (pcp_0_slow_bridge_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                         //       src.ready
		.src_valid          (router_001_src_valid),                         //          .valid
		.src_data           (router_001_src_data),                          //          .data
		.src_channel        (router_001_src_channel),                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                  //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (com_mem_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (com_mem_s1_agent_rp_valid),                    //          .valid
		.sink_data          (com_mem_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (com_mem_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (com_mem_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (openmac_0_macreg_agent_rp_ready),              //      sink.ready
		.sink_valid         (openmac_0_macreg_agent_rp_valid),              //          .valid
		.sink_data          (openmac_0_macreg_agent_rp_data),               //          .data
		.sink_startofpacket (openmac_0_macreg_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (openmac_0_macreg_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (openmac_0_mactimer_agent_rp_ready),            //      sink.ready
		.sink_valid         (openmac_0_mactimer_agent_rp_valid),            //          .valid
		.sink_data          (openmac_0_mactimer_agent_rp_data),             //          .data
		.sink_startofpacket (openmac_0_mactimer_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (openmac_0_mactimer_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (openmac_0_pktbuf_agent_rp_ready),                               //      sink.ready
		.sink_valid         (openmac_0_pktbuf_agent_rp_valid),                               //          .valid
		.sink_data          (openmac_0_pktbuf_agent_rp_data),                                //          .data
		.sink_startofpacket (openmac_0_pktbuf_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (openmac_0_pktbuf_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_100_outclk0_clk),                                           //       clk.clk
		.reset              (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                          //       src.ready
		.src_valid          (router_006_src_valid),                                          //          .valid
		.src_data           (router_006_src_data),                                           //          .data
		.src_channel        (router_006_src_channel),                                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (com_mem_s2_agent_rp_ready),                    //      sink.ready
		.sink_valid         (com_mem_s2_agent_rp_valid),                    //          .valid
		.sink_data          (com_mem_s2_agent_rp_data),                     //          .data
		.sink_startofpacket (com_mem_s2_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (com_mem_s2_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) host_0_lw_bridge_m0_limiter (
		.clk                    (clk_50_clk_clk),                                    //       clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                  //          .valid
		.cmd_sink_data          (router_src_data),                                   //          .data
		.cmd_sink_channel       (router_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (host_0_lw_bridge_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (host_0_lw_bridge_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (host_0_lw_bridge_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (host_0_lw_bridge_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (host_0_lw_bridge_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (host_0_lw_bridge_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (host_0_lw_bridge_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (host_0_lw_bridge_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (host_0_lw_bridge_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (host_0_lw_bridge_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (host_0_lw_bridge_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (host_0_lw_bridge_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) pcp_0_slow_bridge_limiter (
		.clk                    (clk_50_clk_clk),                                  //       clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                            //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                            //          .valid
		.cmd_sink_data          (router_001_src_data),                             //          .data
		.cmd_sink_channel       (router_001_src_channel),                          //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                    //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                      //          .endofpacket
		.cmd_src_ready          (pcp_0_slow_bridge_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (pcp_0_slow_bridge_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (pcp_0_slow_bridge_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (pcp_0_slow_bridge_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (pcp_0_slow_bridge_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                           //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                         //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                            //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                     //          .endofpacket
		.rsp_src_ready          (pcp_0_slow_bridge_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (pcp_0_slow_bridge_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (pcp_0_slow_bridge_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (pcp_0_slow_bridge_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (pcp_0_slow_bridge_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (pcp_0_slow_bridge_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (pcp_0_slow_bridge_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (36),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (54),
		.PKT_BYTE_CNT_H            (45),
		.PKT_BYTE_CNT_L            (43),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_BURST_TYPE_H          (51),
		.PKT_BURST_TYPE_L          (50),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (46),
		.PKT_TRANS_COMPRESSED_READ (37),
		.PKT_TRANS_WRITE           (39),
		.PKT_TRANS_READ            (40),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (75),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (44),
		.OUT_BURSTWRAP_H           (46),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) openmac_0_macreg_burst_adapter (
		.clk                   (clk_50_clk_clk),                                       //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (openmac_0_macreg_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (openmac_0_macreg_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (openmac_0_macreg_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (openmac_0_macreg_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (openmac_0_macreg_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (openmac_0_macreg_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (openmac_0_macreg_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (openmac_0_macreg_burst_adapter_source0_data),          //          .data
		.source0_channel       (openmac_0_macreg_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (openmac_0_macreg_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (openmac_0_macreg_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (openmac_0_macreg_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                                    //        clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),      //  clk_reset.reset
		.sink_ready         (host_0_lw_bridge_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (host_0_lw_bridge_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (host_0_lw_bridge_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (host_0_lw_bridge_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (host_0_lw_bridge_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (host_0_lw_bridge_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_src0_data),                               //           .data
		.src0_channel       (cmd_demux_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_src1_data),                               //           .data
		.src1_channel       (cmd_demux_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                         //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_50_clk_clk),                                  //        clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (pcp_0_slow_bridge_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (pcp_0_slow_bridge_limiter_cmd_src_channel),       //           .channel
		.sink_data          (pcp_0_slow_bridge_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (pcp_0_slow_bridge_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (pcp_0_slow_bridge_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (pcp_0_slow_bridge_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                        //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                        //           .valid
		.src0_data          (cmd_demux_001_src0_data),                         //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                      //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                  //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                        //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                        //           .valid
		.src1_data          (cmd_demux_001_src1_data),                         //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                      //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                  //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                        //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                        //           .valid
		.src2_data          (cmd_demux_001_src2_data),                         //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                      //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                  //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                        //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                        //           .valid
		.src3_data          (cmd_demux_001_src3_data),                         //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                      //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                  //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                        //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                        //           .valid
		.src4_data          (cmd_demux_001_src4_data),                         //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                      //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (clk_100_outclk0_clk),                                           //       clk.clk
		.reset               (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                         //          .valid
		.src_data            (cmd_mux_004_src_data),                                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                             //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                             //          .valid
		.sink0_channel       (crosser_out_channel),                                           //          .channel
		.sink0_data          (crosser_out_data),                                              //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_50_clk_clk),                                       //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (openmac_0_macreg_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (openmac_0_macreg_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (openmac_0_macreg_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (openmac_0_macreg_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (openmac_0_macreg_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (openmac_0_macreg_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_002_src0_data),                              //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_100_outclk0_clk),                                           //       clk.clk
		.reset              (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                          //      sink.ready
		.sink_channel       (router_006_src_channel),                                        //          .channel
		.sink_data          (router_006_src_data),                                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                         //      sink.ready
		.sink_channel       (router_007_src_channel),                       //          .channel
		.sink_data          (router_007_src_data),                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src0_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.sink1_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.sink1_data          (rsp_demux_002_src0_data),                      //          .data
		.sink1_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_003_src0_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.sink2_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.sink2_data          (rsp_demux_003_src0_data),                      //          .data
		.sink2_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.sink3_ready         (crosser_001_out_ready),                        //     sink3.ready
		.sink3_valid         (crosser_001_out_valid),                        //          .valid
		.sink3_channel       (crosser_001_out_channel),                      //          .channel
		.sink3_data          (crosser_001_out_data),                         //          .data
		.sink3_startofpacket (crosser_001_out_startofpacket),                //          .startofpacket
		.sink3_endofpacket   (crosser_001_out_endofpacket),                  //          .endofpacket
		.sink4_ready         (rsp_demux_005_src0_ready),                     //     sink4.ready
		.sink4_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.sink4_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.sink4_data          (rsp_demux_005_src0_data),                      //          .data
		.sink4_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket   (rsp_demux_005_src0_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (36),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (45),
		.IN_PKT_BYTE_CNT_L             (43),
		.IN_PKT_TRANS_COMPRESSED_READ  (37),
		.IN_PKT_BURSTWRAP_H            (46),
		.IN_PKT_BURSTWRAP_L            (46),
		.IN_PKT_BURST_SIZE_H           (49),
		.IN_PKT_BURST_SIZE_L           (47),
		.IN_PKT_RESPONSE_STATUS_H      (71),
		.IN_PKT_RESPONSE_STATUS_L      (70),
		.IN_PKT_TRANS_EXCLUSIVE        (42),
		.IN_PKT_BURST_TYPE_H           (51),
		.IN_PKT_BURST_TYPE_L           (50),
		.IN_PKT_ORI_BURST_SIZE_L       (72),
		.IN_PKT_ORI_BURST_SIZE_H       (74),
		.IN_ST_DATA_W                  (75),
		.OUT_PKT_ADDR_H                (54),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (61),
		.OUT_PKT_TRANS_COMPRESSED_READ (55),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (60),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (93),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) openmac_0_macreg_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                       //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_004_src_valid),                                 //      sink.valid
		.in_channel           (router_004_src_channel),                               //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                           //          .endofpacket
		.in_ready             (router_004_src_ready),                                 //          .ready
		.in_data              (router_004_src_data),                                  //          .data
		.out_endofpacket      (openmac_0_macreg_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (openmac_0_macreg_rsp_width_adapter_src_data),          //          .data
		.out_channel          (openmac_0_macreg_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (openmac_0_macreg_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (openmac_0_macreg_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (openmac_0_macreg_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (54),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (61),
		.IN_PKT_TRANS_COMPRESSED_READ  (55),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (60),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (93),
		.OUT_PKT_ADDR_H                (36),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (45),
		.OUT_PKT_BYTE_CNT_L            (43),
		.OUT_PKT_TRANS_COMPRESSED_READ (37),
		.OUT_PKT_BURST_SIZE_H          (49),
		.OUT_PKT_BURST_SIZE_L          (47),
		.OUT_PKT_RESPONSE_STATUS_H     (71),
		.OUT_PKT_RESPONSE_STATUS_L     (70),
		.OUT_PKT_TRANS_EXCLUSIVE       (42),
		.OUT_PKT_BURST_TYPE_H          (51),
		.OUT_PKT_BURST_TYPE_L          (50),
		.OUT_PKT_ORI_BURST_SIZE_L      (72),
		.OUT_PKT_ORI_BURST_SIZE_H      (74),
		.OUT_ST_DATA_W                 (75),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) openmac_0_macreg_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                       //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                              //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                          //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                //          .ready
		.in_data              (cmd_mux_002_src_data),                                 //          .data
		.out_endofpacket      (openmac_0_macreg_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (openmac_0_macreg_cmd_width_adapter_src_data),          //          .data
		.out_channel          (openmac_0_macreg_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (openmac_0_macreg_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (openmac_0_macreg_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (openmac_0_macreg_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (93),
		.BITS_PER_SYMBOL     (93),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                                                //        in_clk.clk
		.in_reset          (sysid_qsys_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_100_outclk0_clk),                                           //       out_clk.clk
		.out_reset         (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                      //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                    //              .channel
		.in_data           (cmd_demux_001_src3_data),                                       //              .data
		.out_ready         (crosser_out_ready),                                             //           out.ready
		.out_valid         (crosser_out_valid),                                             //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                     //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                       //              .endofpacket
		.out_channel       (crosser_out_channel),                                           //              .channel
		.out_data          (crosser_out_data),                                              //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (93),
		.BITS_PER_SYMBOL     (93),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_100_outclk0_clk),                                           //        in_clk.clk
		.in_reset          (openmac_0_pktBuf_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                //       out_clk.clk
		.out_reset         (sysid_qsys_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                      //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                    //              .channel
		.in_data           (rsp_demux_004_src0_data),                                       //              .data
		.out_ready         (crosser_001_out_ready),                                         //           out.ready
		.out_valid         (crosser_001_out_valid),                                         //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                       //              .channel
		.out_data          (crosser_001_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

endmodule
