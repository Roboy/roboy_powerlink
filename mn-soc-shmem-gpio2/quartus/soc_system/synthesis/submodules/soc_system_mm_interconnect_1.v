// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2018.02.08.18:46:05

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire        clk_100_outclk0_clk,                                        //                                      clk_100_outclk0.clk
		input  wire        clk_50_clk_clk,                                             //                                           clk_50_clk.clk
		input  wire        onchip_memory2_0_reset1_reset_bridge_in_reset_reset,        //        onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		input  wire        openmac_0_dma_translator_reset_reset_bridge_in_reset_reset, // openmac_0_dma_translator_reset_reset_bridge_in_reset.reset
		input  wire        openmac_0_dmaRst_reset_bridge_in_reset_reset,               //               openmac_0_dmaRst_reset_bridge_in_reset.reset
		input  wire [26:0] host_0_fpga_mem_address,                                    //                                      host_0_fpga_mem.address
		output wire        host_0_fpga_mem_waitrequest,                                //                                                     .waitrequest
		input  wire [0:0]  host_0_fpga_mem_burstcount,                                 //                                                     .burstcount
		input  wire [3:0]  host_0_fpga_mem_byteenable,                                 //                                                     .byteenable
		input  wire        host_0_fpga_mem_read,                                       //                                                     .read
		output wire [31:0] host_0_fpga_mem_readdata,                                   //                                                     .readdata
		output wire        host_0_fpga_mem_readdatavalid,                              //                                                     .readdatavalid
		input  wire        host_0_fpga_mem_write,                                      //                                                     .write
		input  wire [31:0] host_0_fpga_mem_writedata,                                  //                                                     .writedata
		input  wire        host_0_fpga_mem_debugaccess,                                //                                                     .debugaccess
		input  wire [18:0] openmac_0_dma_address,                                      //                                        openmac_0_dma.address
		output wire        openmac_0_dma_waitrequest,                                  //                                                     .waitrequest
		input  wire [12:0] openmac_0_dma_burstcount,                                   //                                                     .burstcount
		input  wire [1:0]  openmac_0_dma_byteenable,                                   //                                                     .byteenable
		input  wire        openmac_0_dma_write,                                        //                                                     .write
		input  wire [15:0] openmac_0_dma_writedata,                                    //                                                     .writedata
		input  wire [21:0] pcp_0_cpu_bridge_address,                                   //                                     pcp_0_cpu_bridge.address
		output wire        pcp_0_cpu_bridge_waitrequest,                               //                                                     .waitrequest
		input  wire [0:0]  pcp_0_cpu_bridge_burstcount,                                //                                                     .burstcount
		input  wire [3:0]  pcp_0_cpu_bridge_byteenable,                                //                                                     .byteenable
		input  wire        pcp_0_cpu_bridge_read,                                      //                                                     .read
		output wire [31:0] pcp_0_cpu_bridge_readdata,                                  //                                                     .readdata
		output wire        pcp_0_cpu_bridge_readdatavalid,                             //                                                     .readdatavalid
		input  wire        pcp_0_cpu_bridge_write,                                     //                                                     .write
		input  wire [31:0] pcp_0_cpu_bridge_writedata,                                 //                                                     .writedata
		input  wire        pcp_0_cpu_bridge_debugaccess,                               //                                                     .debugaccess
		input  wire [21:0] pcp_0_flash_bridge_address,                                 //                                   pcp_0_flash_bridge.address
		output wire        pcp_0_flash_bridge_waitrequest,                             //                                                     .waitrequest
		input  wire [0:0]  pcp_0_flash_bridge_burstcount,                              //                                                     .burstcount
		input  wire [3:0]  pcp_0_flash_bridge_byteenable,                              //                                                     .byteenable
		input  wire        pcp_0_flash_bridge_read,                                    //                                                     .read
		output wire [31:0] pcp_0_flash_bridge_readdata,                                //                                                     .readdata
		output wire        pcp_0_flash_bridge_readdatavalid,                           //                                                     .readdatavalid
		input  wire        pcp_0_flash_bridge_write,                                   //                                                     .write
		input  wire [31:0] pcp_0_flash_bridge_writedata,                               //                                                     .writedata
		input  wire        pcp_0_flash_bridge_debugaccess,                             //                                                     .debugaccess
		output wire [16:0] onchip_memory2_0_s1_address,                                //                                  onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                  //                                                     .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                               //                                                     .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                              //                                                     .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                             //                                                     .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                             //                                                     .chipselect
		output wire        onchip_memory2_0_s1_clken                                   //                                                     .clken
	);

	wire          openmac_0_dma_translator_avalon_universal_master_0_waitrequest;        // openmac_0_dma_agent:av_waitrequest -> openmac_0_dma_translator:uav_waitrequest
	wire   [13:0] openmac_0_dma_translator_avalon_universal_master_0_burstcount;         // openmac_0_dma_translator:uav_burstcount -> openmac_0_dma_agent:av_burstcount
	wire   [15:0] openmac_0_dma_translator_avalon_universal_master_0_writedata;          // openmac_0_dma_translator:uav_writedata -> openmac_0_dma_agent:av_writedata
	wire   [26:0] openmac_0_dma_translator_avalon_universal_master_0_address;            // openmac_0_dma_translator:uav_address -> openmac_0_dma_agent:av_address
	wire          openmac_0_dma_translator_avalon_universal_master_0_lock;               // openmac_0_dma_translator:uav_lock -> openmac_0_dma_agent:av_lock
	wire          openmac_0_dma_translator_avalon_universal_master_0_write;              // openmac_0_dma_translator:uav_write -> openmac_0_dma_agent:av_write
	wire          openmac_0_dma_translator_avalon_universal_master_0_read;               // openmac_0_dma_translator:uav_read -> openmac_0_dma_agent:av_read
	wire   [15:0] openmac_0_dma_translator_avalon_universal_master_0_readdata;           // openmac_0_dma_agent:av_readdata -> openmac_0_dma_translator:uav_readdata
	wire          openmac_0_dma_translator_avalon_universal_master_0_debugaccess;        // openmac_0_dma_translator:uav_debugaccess -> openmac_0_dma_agent:av_debugaccess
	wire    [1:0] openmac_0_dma_translator_avalon_universal_master_0_byteenable;         // openmac_0_dma_translator:uav_byteenable -> openmac_0_dma_agent:av_byteenable
	wire          openmac_0_dma_translator_avalon_universal_master_0_readdatavalid;      // openmac_0_dma_agent:av_readdatavalid -> openmac_0_dma_translator:uav_readdatavalid
	wire          host_0_fpga_mem_translator_avalon_universal_master_0_waitrequest;      // host_0_fpga_mem_agent:av_waitrequest -> host_0_fpga_mem_translator:uav_waitrequest
	wire    [2:0] host_0_fpga_mem_translator_avalon_universal_master_0_burstcount;       // host_0_fpga_mem_translator:uav_burstcount -> host_0_fpga_mem_agent:av_burstcount
	wire   [31:0] host_0_fpga_mem_translator_avalon_universal_master_0_writedata;        // host_0_fpga_mem_translator:uav_writedata -> host_0_fpga_mem_agent:av_writedata
	wire   [26:0] host_0_fpga_mem_translator_avalon_universal_master_0_address;          // host_0_fpga_mem_translator:uav_address -> host_0_fpga_mem_agent:av_address
	wire          host_0_fpga_mem_translator_avalon_universal_master_0_lock;             // host_0_fpga_mem_translator:uav_lock -> host_0_fpga_mem_agent:av_lock
	wire          host_0_fpga_mem_translator_avalon_universal_master_0_write;            // host_0_fpga_mem_translator:uav_write -> host_0_fpga_mem_agent:av_write
	wire          host_0_fpga_mem_translator_avalon_universal_master_0_read;             // host_0_fpga_mem_translator:uav_read -> host_0_fpga_mem_agent:av_read
	wire   [31:0] host_0_fpga_mem_translator_avalon_universal_master_0_readdata;         // host_0_fpga_mem_agent:av_readdata -> host_0_fpga_mem_translator:uav_readdata
	wire          host_0_fpga_mem_translator_avalon_universal_master_0_debugaccess;      // host_0_fpga_mem_translator:uav_debugaccess -> host_0_fpga_mem_agent:av_debugaccess
	wire    [3:0] host_0_fpga_mem_translator_avalon_universal_master_0_byteenable;       // host_0_fpga_mem_translator:uav_byteenable -> host_0_fpga_mem_agent:av_byteenable
	wire          host_0_fpga_mem_translator_avalon_universal_master_0_readdatavalid;    // host_0_fpga_mem_agent:av_readdatavalid -> host_0_fpga_mem_translator:uav_readdatavalid
	wire          rsp_mux_001_src_endofpacket;                                           // rsp_mux_001:src_endofpacket -> host_0_fpga_mem_agent:rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                 // rsp_mux_001:src_valid -> host_0_fpga_mem_agent:rp_valid
	wire          rsp_mux_001_src_startofpacket;                                         // rsp_mux_001:src_startofpacket -> host_0_fpga_mem_agent:rp_startofpacket
	wire  [109:0] rsp_mux_001_src_data;                                                  // rsp_mux_001:src_data -> host_0_fpga_mem_agent:rp_data
	wire    [3:0] rsp_mux_001_src_channel;                                               // rsp_mux_001:src_channel -> host_0_fpga_mem_agent:rp_channel
	wire          rsp_mux_001_src_ready;                                                 // host_0_fpga_mem_agent:rp_ready -> rsp_mux_001:src_ready
	wire          pcp_0_cpu_bridge_translator_avalon_universal_master_0_waitrequest;     // pcp_0_cpu_bridge_agent:av_waitrequest -> pcp_0_cpu_bridge_translator:uav_waitrequest
	wire    [2:0] pcp_0_cpu_bridge_translator_avalon_universal_master_0_burstcount;      // pcp_0_cpu_bridge_translator:uav_burstcount -> pcp_0_cpu_bridge_agent:av_burstcount
	wire   [31:0] pcp_0_cpu_bridge_translator_avalon_universal_master_0_writedata;       // pcp_0_cpu_bridge_translator:uav_writedata -> pcp_0_cpu_bridge_agent:av_writedata
	wire   [26:0] pcp_0_cpu_bridge_translator_avalon_universal_master_0_address;         // pcp_0_cpu_bridge_translator:uav_address -> pcp_0_cpu_bridge_agent:av_address
	wire          pcp_0_cpu_bridge_translator_avalon_universal_master_0_lock;            // pcp_0_cpu_bridge_translator:uav_lock -> pcp_0_cpu_bridge_agent:av_lock
	wire          pcp_0_cpu_bridge_translator_avalon_universal_master_0_write;           // pcp_0_cpu_bridge_translator:uav_write -> pcp_0_cpu_bridge_agent:av_write
	wire          pcp_0_cpu_bridge_translator_avalon_universal_master_0_read;            // pcp_0_cpu_bridge_translator:uav_read -> pcp_0_cpu_bridge_agent:av_read
	wire   [31:0] pcp_0_cpu_bridge_translator_avalon_universal_master_0_readdata;        // pcp_0_cpu_bridge_agent:av_readdata -> pcp_0_cpu_bridge_translator:uav_readdata
	wire          pcp_0_cpu_bridge_translator_avalon_universal_master_0_debugaccess;     // pcp_0_cpu_bridge_translator:uav_debugaccess -> pcp_0_cpu_bridge_agent:av_debugaccess
	wire    [3:0] pcp_0_cpu_bridge_translator_avalon_universal_master_0_byteenable;      // pcp_0_cpu_bridge_translator:uav_byteenable -> pcp_0_cpu_bridge_agent:av_byteenable
	wire          pcp_0_cpu_bridge_translator_avalon_universal_master_0_readdatavalid;   // pcp_0_cpu_bridge_agent:av_readdatavalid -> pcp_0_cpu_bridge_translator:uav_readdatavalid
	wire          rsp_mux_002_src_endofpacket;                                           // rsp_mux_002:src_endofpacket -> pcp_0_cpu_bridge_agent:rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                 // rsp_mux_002:src_valid -> pcp_0_cpu_bridge_agent:rp_valid
	wire          rsp_mux_002_src_startofpacket;                                         // rsp_mux_002:src_startofpacket -> pcp_0_cpu_bridge_agent:rp_startofpacket
	wire  [109:0] rsp_mux_002_src_data;                                                  // rsp_mux_002:src_data -> pcp_0_cpu_bridge_agent:rp_data
	wire    [3:0] rsp_mux_002_src_channel;                                               // rsp_mux_002:src_channel -> pcp_0_cpu_bridge_agent:rp_channel
	wire          rsp_mux_002_src_ready;                                                 // pcp_0_cpu_bridge_agent:rp_ready -> rsp_mux_002:src_ready
	wire          pcp_0_flash_bridge_translator_avalon_universal_master_0_waitrequest;   // pcp_0_flash_bridge_agent:av_waitrequest -> pcp_0_flash_bridge_translator:uav_waitrequest
	wire    [2:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_burstcount;    // pcp_0_flash_bridge_translator:uav_burstcount -> pcp_0_flash_bridge_agent:av_burstcount
	wire   [31:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_writedata;     // pcp_0_flash_bridge_translator:uav_writedata -> pcp_0_flash_bridge_agent:av_writedata
	wire   [26:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_address;       // pcp_0_flash_bridge_translator:uav_address -> pcp_0_flash_bridge_agent:av_address
	wire          pcp_0_flash_bridge_translator_avalon_universal_master_0_lock;          // pcp_0_flash_bridge_translator:uav_lock -> pcp_0_flash_bridge_agent:av_lock
	wire          pcp_0_flash_bridge_translator_avalon_universal_master_0_write;         // pcp_0_flash_bridge_translator:uav_write -> pcp_0_flash_bridge_agent:av_write
	wire          pcp_0_flash_bridge_translator_avalon_universal_master_0_read;          // pcp_0_flash_bridge_translator:uav_read -> pcp_0_flash_bridge_agent:av_read
	wire   [31:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_readdata;      // pcp_0_flash_bridge_agent:av_readdata -> pcp_0_flash_bridge_translator:uav_readdata
	wire          pcp_0_flash_bridge_translator_avalon_universal_master_0_debugaccess;   // pcp_0_flash_bridge_translator:uav_debugaccess -> pcp_0_flash_bridge_agent:av_debugaccess
	wire    [3:0] pcp_0_flash_bridge_translator_avalon_universal_master_0_byteenable;    // pcp_0_flash_bridge_translator:uav_byteenable -> pcp_0_flash_bridge_agent:av_byteenable
	wire          pcp_0_flash_bridge_translator_avalon_universal_master_0_readdatavalid; // pcp_0_flash_bridge_agent:av_readdatavalid -> pcp_0_flash_bridge_translator:uav_readdatavalid
	wire          rsp_mux_003_src_endofpacket;                                           // rsp_mux_003:src_endofpacket -> pcp_0_flash_bridge_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                 // rsp_mux_003:src_valid -> pcp_0_flash_bridge_agent:rp_valid
	wire          rsp_mux_003_src_startofpacket;                                         // rsp_mux_003:src_startofpacket -> pcp_0_flash_bridge_agent:rp_startofpacket
	wire  [109:0] rsp_mux_003_src_data;                                                  // rsp_mux_003:src_data -> pcp_0_flash_bridge_agent:rp_data
	wire    [3:0] rsp_mux_003_src_channel;                                               // rsp_mux_003:src_channel -> pcp_0_flash_bridge_agent:rp_channel
	wire          rsp_mux_003_src_ready;                                                 // pcp_0_flash_bridge_agent:rp_ready -> rsp_mux_003:src_ready
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                              // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                               // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire   [26:0] onchip_memory2_0_s1_agent_m0_address;                                  // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire          onchip_memory2_0_s1_agent_m0_write;                                    // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire          onchip_memory2_0_s1_agent_m0_lock;                                     // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire          onchip_memory2_0_s1_agent_m0_read;                                     // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                 // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                            // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                              // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                               // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                       // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                             // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                     // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [110:0] onchip_memory2_0_s1_agent_rf_source_data;                              // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                             // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                    // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                          // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                  // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire  [110:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                           // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                          // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                        // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                         // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                        // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                        // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                         // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                        // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          openmac_0_dma_agent_cp_endofpacket;                                    // openmac_0_dma_agent:cp_endofpacket -> router:sink_endofpacket
	wire          openmac_0_dma_agent_cp_valid;                                          // openmac_0_dma_agent:cp_valid -> router:sink_valid
	wire          openmac_0_dma_agent_cp_startofpacket;                                  // openmac_0_dma_agent:cp_startofpacket -> router:sink_startofpacket
	wire   [91:0] openmac_0_dma_agent_cp_data;                                           // openmac_0_dma_agent:cp_data -> router:sink_data
	wire          openmac_0_dma_agent_cp_ready;                                          // router:sink_ready -> openmac_0_dma_agent:cp_ready
	wire          host_0_fpga_mem_agent_cp_endofpacket;                                  // host_0_fpga_mem_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          host_0_fpga_mem_agent_cp_valid;                                        // host_0_fpga_mem_agent:cp_valid -> router_001:sink_valid
	wire          host_0_fpga_mem_agent_cp_startofpacket;                                // host_0_fpga_mem_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [109:0] host_0_fpga_mem_agent_cp_data;                                         // host_0_fpga_mem_agent:cp_data -> router_001:sink_data
	wire          host_0_fpga_mem_agent_cp_ready;                                        // router_001:sink_ready -> host_0_fpga_mem_agent:cp_ready
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> cmd_demux_001:sink_valid
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [109:0] router_001_src_data;                                                   // router_001:src_data -> cmd_demux_001:sink_data
	wire    [3:0] router_001_src_channel;                                                // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_ready;                                                  // cmd_demux_001:sink_ready -> router_001:src_ready
	wire          pcp_0_cpu_bridge_agent_cp_endofpacket;                                 // pcp_0_cpu_bridge_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          pcp_0_cpu_bridge_agent_cp_valid;                                       // pcp_0_cpu_bridge_agent:cp_valid -> router_002:sink_valid
	wire          pcp_0_cpu_bridge_agent_cp_startofpacket;                               // pcp_0_cpu_bridge_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire  [109:0] pcp_0_cpu_bridge_agent_cp_data;                                        // pcp_0_cpu_bridge_agent:cp_data -> router_002:sink_data
	wire          pcp_0_cpu_bridge_agent_cp_ready;                                       // router_002:sink_ready -> pcp_0_cpu_bridge_agent:cp_ready
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> cmd_demux_002:sink_valid
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire  [109:0] router_002_src_data;                                                   // router_002:src_data -> cmd_demux_002:sink_data
	wire    [3:0] router_002_src_channel;                                                // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_ready;                                                  // cmd_demux_002:sink_ready -> router_002:src_ready
	wire          pcp_0_flash_bridge_agent_cp_endofpacket;                               // pcp_0_flash_bridge_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          pcp_0_flash_bridge_agent_cp_valid;                                     // pcp_0_flash_bridge_agent:cp_valid -> router_003:sink_valid
	wire          pcp_0_flash_bridge_agent_cp_startofpacket;                             // pcp_0_flash_bridge_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire  [109:0] pcp_0_flash_bridge_agent_cp_data;                                      // pcp_0_flash_bridge_agent:cp_data -> router_003:sink_data
	wire          pcp_0_flash_bridge_agent_cp_ready;                                     // router_003:sink_ready -> pcp_0_flash_bridge_agent:cp_ready
	wire          router_003_src_endofpacket;                                            // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_003_src_valid;                                                  // router_003:src_valid -> cmd_demux_003:sink_valid
	wire          router_003_src_startofpacket;                                          // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire  [109:0] router_003_src_data;                                                   // router_003:src_data -> cmd_demux_003:sink_data
	wire    [3:0] router_003_src_channel;                                                // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_ready;                                                  // cmd_demux_003:sink_ready -> router_003:src_ready
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                              // onchip_memory2_0_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                    // onchip_memory2_0_s1_agent:rp_valid -> router_004:sink_valid
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                            // onchip_memory2_0_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [109:0] onchip_memory2_0_s1_agent_rp_data;                                     // onchip_memory2_0_s1_agent:rp_data -> router_004:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                    // router_004:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          router_004_src_endofpacket;                                            // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_004_src_valid;                                                  // router_004:src_valid -> rsp_demux:sink_valid
	wire          router_004_src_startofpacket;                                          // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [109:0] router_004_src_data;                                                   // router_004:src_data -> rsp_demux:sink_data
	wire    [3:0] router_004_src_channel;                                                // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_ready;                                                  // rsp_demux:sink_ready -> router_004:src_ready
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire  [109:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire    [3:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                     // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                 // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                       // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;               // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire  [109:0] onchip_memory2_0_s1_burst_adapter_source0_data;                        // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                       // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [3:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                     // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_demux_003_src0_endofpacket;                                        // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src0_valid;                                              // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire          cmd_demux_003_src0_startofpacket;                                      // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire  [109:0] cmd_demux_003_src0_data;                                               // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire    [3:0] cmd_demux_003_src0_channel;                                            // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_ready;                                              // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire          rsp_demux_src3_endofpacket;                                            // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                  // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire          rsp_demux_src3_startofpacket;                                          // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire  [109:0] rsp_demux_src3_data;                                                   // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire    [3:0] rsp_demux_src3_channel;                                                // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_ready;                                                  // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> openmac_0_dma_rsp_width_adapter:in_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> openmac_0_dma_rsp_width_adapter:in_valid
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> openmac_0_dma_rsp_width_adapter:in_startofpacket
	wire  [109:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> openmac_0_dma_rsp_width_adapter:in_data
	wire    [3:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> openmac_0_dma_rsp_width_adapter:in_channel
	wire          rsp_mux_src_ready;                                                     // openmac_0_dma_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire          openmac_0_dma_rsp_width_adapter_src_endofpacket;                       // openmac_0_dma_rsp_width_adapter:out_endofpacket -> openmac_0_dma_agent:rp_endofpacket
	wire          openmac_0_dma_rsp_width_adapter_src_valid;                             // openmac_0_dma_rsp_width_adapter:out_valid -> openmac_0_dma_agent:rp_valid
	wire          openmac_0_dma_rsp_width_adapter_src_startofpacket;                     // openmac_0_dma_rsp_width_adapter:out_startofpacket -> openmac_0_dma_agent:rp_startofpacket
	wire   [91:0] openmac_0_dma_rsp_width_adapter_src_data;                              // openmac_0_dma_rsp_width_adapter:out_data -> openmac_0_dma_agent:rp_data
	wire          openmac_0_dma_rsp_width_adapter_src_ready;                             // openmac_0_dma_agent:rp_ready -> openmac_0_dma_rsp_width_adapter:out_ready
	wire    [3:0] openmac_0_dma_rsp_width_adapter_src_channel;                           // openmac_0_dma_rsp_width_adapter:out_channel -> openmac_0_dma_agent:rp_channel
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> openmac_0_dma_cmd_width_adapter:in_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> openmac_0_dma_cmd_width_adapter:in_valid
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> openmac_0_dma_cmd_width_adapter:in_startofpacket
	wire   [91:0] router_src_data;                                                       // router:src_data -> openmac_0_dma_cmd_width_adapter:in_data
	wire    [3:0] router_src_channel;                                                    // router:src_channel -> openmac_0_dma_cmd_width_adapter:in_channel
	wire          router_src_ready;                                                      // openmac_0_dma_cmd_width_adapter:in_ready -> router:src_ready
	wire          openmac_0_dma_cmd_width_adapter_src_endofpacket;                       // openmac_0_dma_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          openmac_0_dma_cmd_width_adapter_src_valid;                             // openmac_0_dma_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire          openmac_0_dma_cmd_width_adapter_src_startofpacket;                     // openmac_0_dma_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire  [109:0] openmac_0_dma_cmd_width_adapter_src_data;                              // openmac_0_dma_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          openmac_0_dma_cmd_width_adapter_src_ready;                             // cmd_demux:sink_ready -> openmac_0_dma_cmd_width_adapter:out_ready
	wire    [3:0] openmac_0_dma_cmd_width_adapter_src_channel;                           // openmac_0_dma_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> crosser:in_valid
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire  [109:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> crosser:in_data
	wire    [3:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_ready;                                                  // crosser:in_ready -> cmd_demux:src0_ready
	wire          crosser_out_endofpacket;                                               // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          crosser_out_valid;                                                     // crosser:out_valid -> cmd_mux:sink0_valid
	wire          crosser_out_startofpacket;                                             // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [109:0] crosser_out_data;                                                      // crosser:out_data -> cmd_mux:sink0_data
	wire    [3:0] crosser_out_channel;                                                   // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_ready;                                                     // cmd_mux:sink0_ready -> crosser:out_ready
	wire          cmd_demux_001_src0_endofpacket;                                        // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                              // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire          cmd_demux_001_src0_startofpacket;                                      // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [109:0] cmd_demux_001_src0_data;                                               // cmd_demux_001:src0_data -> crosser_001:in_data
	wire    [3:0] cmd_demux_001_src0_channel;                                            // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_ready;                                              // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire          crosser_001_out_endofpacket;                                           // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          crosser_001_out_valid;                                                 // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire          crosser_001_out_startofpacket;                                         // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [109:0] crosser_001_out_data;                                                  // crosser_001:out_data -> cmd_mux:sink1_data
	wire    [3:0] crosser_001_out_channel;                                               // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_ready;                                                 // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire          cmd_demux_002_src0_endofpacket;                                        // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                              // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire          cmd_demux_002_src0_startofpacket;                                      // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire  [109:0] cmd_demux_002_src0_data;                                               // cmd_demux_002:src0_data -> crosser_002:in_data
	wire    [3:0] cmd_demux_002_src0_channel;                                            // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_ready;                                              // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire          crosser_002_out_endofpacket;                                           // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          crosser_002_out_valid;                                                 // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire          crosser_002_out_startofpacket;                                         // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire  [109:0] crosser_002_out_data;                                                  // crosser_002:out_data -> cmd_mux:sink2_data
	wire    [3:0] crosser_002_out_channel;                                               // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_ready;                                                 // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> crosser_003:in_valid
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> crosser_003:in_startofpacket
	wire  [109:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> crosser_003:in_data
	wire    [3:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_src0_ready;                                                  // crosser_003:in_ready -> rsp_demux:src0_ready
	wire          crosser_003_out_endofpacket;                                           // crosser_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          crosser_003_out_valid;                                                 // crosser_003:out_valid -> rsp_mux:sink0_valid
	wire          crosser_003_out_startofpacket;                                         // crosser_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [109:0] crosser_003_out_data;                                                  // crosser_003:out_data -> rsp_mux:sink0_data
	wire    [3:0] crosser_003_out_channel;                                               // crosser_003:out_channel -> rsp_mux:sink0_channel
	wire          crosser_003_out_ready;                                                 // rsp_mux:sink0_ready -> crosser_003:out_ready
	wire          rsp_demux_src1_endofpacket;                                            // rsp_demux:src1_endofpacket -> crosser_004:in_endofpacket
	wire          rsp_demux_src1_valid;                                                  // rsp_demux:src1_valid -> crosser_004:in_valid
	wire          rsp_demux_src1_startofpacket;                                          // rsp_demux:src1_startofpacket -> crosser_004:in_startofpacket
	wire  [109:0] rsp_demux_src1_data;                                                   // rsp_demux:src1_data -> crosser_004:in_data
	wire    [3:0] rsp_demux_src1_channel;                                                // rsp_demux:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_src1_ready;                                                  // crosser_004:in_ready -> rsp_demux:src1_ready
	wire          crosser_004_out_endofpacket;                                           // crosser_004:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          crosser_004_out_valid;                                                 // crosser_004:out_valid -> rsp_mux_001:sink0_valid
	wire          crosser_004_out_startofpacket;                                         // crosser_004:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [109:0] crosser_004_out_data;                                                  // crosser_004:out_data -> rsp_mux_001:sink0_data
	wire    [3:0] crosser_004_out_channel;                                               // crosser_004:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_004_out_ready;                                                 // rsp_mux_001:sink0_ready -> crosser_004:out_ready
	wire          rsp_demux_src2_endofpacket;                                            // rsp_demux:src2_endofpacket -> crosser_005:in_endofpacket
	wire          rsp_demux_src2_valid;                                                  // rsp_demux:src2_valid -> crosser_005:in_valid
	wire          rsp_demux_src2_startofpacket;                                          // rsp_demux:src2_startofpacket -> crosser_005:in_startofpacket
	wire  [109:0] rsp_demux_src2_data;                                                   // rsp_demux:src2_data -> crosser_005:in_data
	wire    [3:0] rsp_demux_src2_channel;                                                // rsp_demux:src2_channel -> crosser_005:in_channel
	wire          rsp_demux_src2_ready;                                                  // crosser_005:in_ready -> rsp_demux:src2_ready
	wire          crosser_005_out_endofpacket;                                           // crosser_005:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          crosser_005_out_valid;                                                 // crosser_005:out_valid -> rsp_mux_002:sink0_valid
	wire          crosser_005_out_startofpacket;                                         // crosser_005:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire  [109:0] crosser_005_out_data;                                                  // crosser_005:out_data -> rsp_mux_002:sink0_data
	wire    [3:0] crosser_005_out_channel;                                               // crosser_005:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_005_out_ready;                                                 // rsp_mux_002:sink0_ready -> crosser_005:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (13),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (14),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) openmac_0_dma_translator (
		.clk                      (clk_100_outclk0_clk),                                              //                       clk.clk
		.reset                    (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (openmac_0_dma_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (openmac_0_dma_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (openmac_0_dma_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (openmac_0_dma_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (openmac_0_dma_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (openmac_0_dma_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (openmac_0_dma_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (openmac_0_dma_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (openmac_0_dma_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (openmac_0_dma_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (openmac_0_dma_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (openmac_0_dma_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (openmac_0_dma_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (openmac_0_dma_burstcount),                                         //                          .burstcount
		.av_byteenable            (openmac_0_dma_byteenable),                                         //                          .byteenable
		.av_write                 (openmac_0_dma_write),                                              //                          .write
		.av_writedata             (openmac_0_dma_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                             //               (terminated)
		.av_begintransfer         (1'b0),                                                             //               (terminated)
		.av_chipselect            (1'b0),                                                             //               (terminated)
		.av_read                  (1'b0),                                                             //               (terminated)
		.av_readdata              (),                                                                 //               (terminated)
		.av_readdatavalid         (),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                             //               (terminated)
		.av_debugaccess           (1'b0),                                                             //               (terminated)
		.uav_clken                (),                                                                 //               (terminated)
		.av_clken                 (1'b1),                                                             //               (terminated)
		.uav_response             (2'b00),                                                            //               (terminated)
		.av_response              (),                                                                 //               (terminated)
		.uav_writeresponserequest (),                                                                 //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                             //               (terminated)
		.av_writeresponserequest  (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid    ()                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) host_0_fpga_mem_translator (
		.clk                      (clk_100_outclk0_clk),                                                //                       clk.clk
		.reset                    (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset),         //                     reset.reset
		.uav_address              (host_0_fpga_mem_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (host_0_fpga_mem_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (host_0_fpga_mem_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (host_0_fpga_mem_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (host_0_fpga_mem_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (host_0_fpga_mem_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (host_0_fpga_mem_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (host_0_fpga_mem_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (host_0_fpga_mem_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (host_0_fpga_mem_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (host_0_fpga_mem_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (host_0_fpga_mem_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (host_0_fpga_mem_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (host_0_fpga_mem_burstcount),                                         //                          .burstcount
		.av_byteenable            (host_0_fpga_mem_byteenable),                                         //                          .byteenable
		.av_read                  (host_0_fpga_mem_read),                                               //                          .read
		.av_readdata              (host_0_fpga_mem_readdata),                                           //                          .readdata
		.av_readdatavalid         (host_0_fpga_mem_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (host_0_fpga_mem_write),                                              //                          .write
		.av_writedata             (host_0_fpga_mem_writedata),                                          //                          .writedata
		.av_debugaccess           (host_0_fpga_mem_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcp_0_cpu_bridge_translator (
		.clk                      (clk_100_outclk0_clk),                                                 //                       clk.clk
		.reset                    (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset),          //                     reset.reset
		.uav_address              (pcp_0_cpu_bridge_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcp_0_cpu_bridge_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcp_0_cpu_bridge_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcp_0_cpu_bridge_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcp_0_cpu_bridge_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcp_0_cpu_bridge_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcp_0_cpu_bridge_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcp_0_cpu_bridge_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcp_0_cpu_bridge_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcp_0_cpu_bridge_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcp_0_cpu_bridge_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcp_0_cpu_bridge_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcp_0_cpu_bridge_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcp_0_cpu_bridge_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcp_0_cpu_bridge_byteenable),                                         //                          .byteenable
		.av_read                  (pcp_0_cpu_bridge_read),                                               //                          .read
		.av_readdata              (pcp_0_cpu_bridge_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcp_0_cpu_bridge_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcp_0_cpu_bridge_write),                                              //                          .write
		.av_writedata             (pcp_0_cpu_bridge_writedata),                                          //                          .writedata
		.av_debugaccess           (pcp_0_cpu_bridge_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                //               (terminated)
		.av_begintransfer         (1'b0),                                                                //               (terminated)
		.av_chipselect            (1'b0),                                                                //               (terminated)
		.av_lock                  (1'b0),                                                                //               (terminated)
		.uav_clken                (),                                                                    //               (terminated)
		.av_clken                 (1'b1),                                                                //               (terminated)
		.uav_response             (2'b00),                                                               //               (terminated)
		.av_response              (),                                                                    //               (terminated)
		.uav_writeresponserequest (),                                                                    //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid    ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcp_0_flash_bridge_translator (
		.clk                      (clk_50_clk_clk),                                                        //                       clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address              (pcp_0_flash_bridge_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcp_0_flash_bridge_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcp_0_flash_bridge_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcp_0_flash_bridge_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcp_0_flash_bridge_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcp_0_flash_bridge_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcp_0_flash_bridge_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcp_0_flash_bridge_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcp_0_flash_bridge_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcp_0_flash_bridge_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcp_0_flash_bridge_byteenable),                                         //                          .byteenable
		.av_read                  (pcp_0_flash_bridge_read),                                               //                          .read
		.av_readdata              (pcp_0_flash_bridge_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcp_0_flash_bridge_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcp_0_flash_bridge_write),                                              //                          .write
		.av_writedata             (pcp_0_flash_bridge_writedata),                                          //                          .writedata
		.av_debugaccess           (pcp_0_flash_bridge_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                  //               (terminated)
		.av_begintransfer         (1'b0),                                                                  //               (terminated)
		.av_chipselect            (1'b0),                                                                  //               (terminated)
		.av_lock                  (1'b0),                                                                  //               (terminated)
		.uav_clken                (),                                                                      //               (terminated)
		.av_clken                 (1'b1),                                                                  //               (terminated)
		.uav_response             (2'b00),                                                                 //               (terminated)
		.av_response              (),                                                                      //               (terminated)
		.uav_writeresponserequest (),                                                                      //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                  //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid    ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                      (clk_50_clk_clk),                                      //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (onchip_memory2_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (onchip_memory2_0_s1_agent_m0_read),                   //                         .read
		.uav_write                (onchip_memory2_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (onchip_memory2_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (onchip_memory2_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (onchip_memory2_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (onchip_memory2_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_0_s1_write),                           //                         .write
		.av_readdata              (onchip_memory2_0_s1_readdata),                        //                         .readdata
		.av_writedata             (onchip_memory2_0_s1_writedata),                       //                         .writedata
		.av_byteenable            (onchip_memory2_0_s1_byteenable),                      //                         .byteenable
		.av_chipselect            (onchip_memory2_0_s1_chipselect),                      //                         .chipselect
		.av_clken                 (onchip_memory2_0_s1_clken),                           //                         .clken
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_TRANS_LOCK            (49),
		.PKT_TRANS_EXCLUSIVE       (50),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (14),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) openmac_0_dma_agent (
		.clk                     (clk_100_outclk0_clk),                                              //       clk.clk
		.reset                   (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address              (openmac_0_dma_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (openmac_0_dma_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (openmac_0_dma_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (openmac_0_dma_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (openmac_0_dma_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (openmac_0_dma_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (openmac_0_dma_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (openmac_0_dma_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (openmac_0_dma_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (openmac_0_dma_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (openmac_0_dma_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (openmac_0_dma_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (openmac_0_dma_agent_cp_data),                                      //          .data
		.cp_startofpacket        (openmac_0_dma_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (openmac_0_dma_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (openmac_0_dma_agent_cp_ready),                                     //          .ready
		.rp_valid                (openmac_0_dma_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data                 (openmac_0_dma_rsp_width_adapter_src_data),                         //          .data
		.rp_channel              (openmac_0_dma_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket        (openmac_0_dma_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket          (openmac_0_dma_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready                (openmac_0_dma_rsp_width_adapter_src_ready),                        //          .ready
		.av_response             (),                                                                 // (terminated)
		.av_writeresponserequest (1'b0),                                                             // (terminated)
		.av_writeresponsevalid   ()                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BEGIN_BURST           (91),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_BURST_TYPE_H          (88),
		.PKT_BURST_TYPE_L          (87),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (95),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_DATA_SIDEBAND_H       (90),
		.PKT_DATA_SIDEBAND_L       (90),
		.PKT_QOS_H                 (92),
		.PKT_QOS_L                 (92),
		.PKT_ADDR_SIDEBAND_H       (89),
		.PKT_ADDR_SIDEBAND_L       (89),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_ORI_BURST_SIZE_H      (109),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) host_0_fpga_mem_agent (
		.clk                     (clk_100_outclk0_clk),                                                //       clk.clk
		.reset                   (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.av_address              (host_0_fpga_mem_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (host_0_fpga_mem_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (host_0_fpga_mem_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (host_0_fpga_mem_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (host_0_fpga_mem_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (host_0_fpga_mem_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (host_0_fpga_mem_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (host_0_fpga_mem_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (host_0_fpga_mem_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (host_0_fpga_mem_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (host_0_fpga_mem_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (host_0_fpga_mem_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (host_0_fpga_mem_agent_cp_data),                                      //          .data
		.cp_startofpacket        (host_0_fpga_mem_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (host_0_fpga_mem_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (host_0_fpga_mem_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_001_src_valid),                                              //        rp.valid
		.rp_data                 (rsp_mux_001_src_data),                                               //          .data
		.rp_channel              (rsp_mux_001_src_channel),                                            //          .channel
		.rp_startofpacket        (rsp_mux_001_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket          (rsp_mux_001_src_endofpacket),                                        //          .endofpacket
		.rp_ready                (rsp_mux_001_src_ready),                                              //          .ready
		.av_response             (),                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BEGIN_BURST           (91),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_BURST_TYPE_H          (88),
		.PKT_BURST_TYPE_L          (87),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (95),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_DATA_SIDEBAND_H       (90),
		.PKT_DATA_SIDEBAND_L       (90),
		.PKT_QOS_H                 (92),
		.PKT_QOS_L                 (92),
		.PKT_ADDR_SIDEBAND_H       (89),
		.PKT_ADDR_SIDEBAND_L       (89),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_ORI_BURST_SIZE_H      (109),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcp_0_cpu_bridge_agent (
		.clk                     (clk_100_outclk0_clk),                                                 //       clk.clk
		.reset                   (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.av_address              (pcp_0_cpu_bridge_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcp_0_cpu_bridge_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcp_0_cpu_bridge_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcp_0_cpu_bridge_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcp_0_cpu_bridge_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcp_0_cpu_bridge_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcp_0_cpu_bridge_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcp_0_cpu_bridge_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcp_0_cpu_bridge_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcp_0_cpu_bridge_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcp_0_cpu_bridge_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcp_0_cpu_bridge_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcp_0_cpu_bridge_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcp_0_cpu_bridge_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcp_0_cpu_bridge_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcp_0_cpu_bridge_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_002_src_valid),                                               //        rp.valid
		.rp_data                 (rsp_mux_002_src_data),                                                //          .data
		.rp_channel              (rsp_mux_002_src_channel),                                             //          .channel
		.rp_startofpacket        (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket          (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.rp_ready                (rsp_mux_002_src_ready),                                               //          .ready
		.av_response             (),                                                                    // (terminated)
		.av_writeresponserequest (1'b0),                                                                // (terminated)
		.av_writeresponsevalid   ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BEGIN_BURST           (91),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_BURST_TYPE_H          (88),
		.PKT_BURST_TYPE_L          (87),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (95),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_DATA_SIDEBAND_H       (90),
		.PKT_DATA_SIDEBAND_L       (90),
		.PKT_QOS_H                 (92),
		.PKT_QOS_L                 (92),
		.PKT_ADDR_SIDEBAND_H       (89),
		.PKT_ADDR_SIDEBAND_L       (89),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_ORI_BURST_SIZE_H      (109),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcp_0_flash_bridge_agent (
		.clk                     (clk_50_clk_clk),                                                        //       clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address              (pcp_0_flash_bridge_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcp_0_flash_bridge_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcp_0_flash_bridge_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcp_0_flash_bridge_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcp_0_flash_bridge_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcp_0_flash_bridge_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcp_0_flash_bridge_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcp_0_flash_bridge_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcp_0_flash_bridge_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcp_0_flash_bridge_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcp_0_flash_bridge_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcp_0_flash_bridge_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcp_0_flash_bridge_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcp_0_flash_bridge_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_003_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_mux_003_src_data),                                                  //          .data
		.rp_channel              (rsp_mux_003_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_mux_003_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_mux_003_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_mux_003_src_ready),                                                 //          .ready
		.av_response             (),                                                                      // (terminated)
		.av_writeresponserequest (1'b0),                                                                  // (terminated)
		.av_writeresponsevalid   ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (91),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (95),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_ORI_BURST_SIZE_H      (109),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponserequest (),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (openmac_0_dma_agent_cp_ready),                               //      sink.ready
		.sink_valid         (openmac_0_dma_agent_cp_valid),                               //          .valid
		.sink_data          (openmac_0_dma_agent_cp_data),                                //          .data
		.sink_startofpacket (openmac_0_dma_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (openmac_0_dma_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (clk_100_outclk0_clk),                                        //       clk.clk
		.reset              (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                           //       src.ready
		.src_valid          (router_src_valid),                                           //          .valid
		.src_data           (router_src_data),                                            //          .data
		.src_channel        (router_src_channel),                                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (host_0_fpga_mem_agent_cp_ready),                             //      sink.ready
		.sink_valid         (host_0_fpga_mem_agent_cp_valid),                             //          .valid
		.sink_data          (host_0_fpga_mem_agent_cp_data),                              //          .data
		.sink_startofpacket (host_0_fpga_mem_agent_cp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (host_0_fpga_mem_agent_cp_endofpacket),                       //          .endofpacket
		.clk                (clk_100_outclk0_clk),                                        //       clk.clk
		.reset              (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //       src.ready
		.src_valid          (router_001_src_valid),                                       //          .valid
		.src_data           (router_001_src_data),                                        //          .data
		.src_channel        (router_001_src_channel),                                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (pcp_0_cpu_bridge_agent_cp_ready),                            //      sink.ready
		.sink_valid         (pcp_0_cpu_bridge_agent_cp_valid),                            //          .valid
		.sink_data          (pcp_0_cpu_bridge_agent_cp_data),                             //          .data
		.sink_startofpacket (pcp_0_cpu_bridge_agent_cp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (pcp_0_cpu_bridge_agent_cp_endofpacket),                      //          .endofpacket
		.clk                (clk_100_outclk0_clk),                                        //       clk.clk
		.reset              (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                       //       src.ready
		.src_valid          (router_002_src_valid),                                       //          .valid
		.src_data           (router_002_src_data),                                        //          .data
		.src_channel        (router_002_src_channel),                                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (pcp_0_flash_bridge_agent_cp_ready),                   //      sink.ready
		.sink_valid         (pcp_0_flash_bridge_agent_cp_valid),                   //          .valid
		.sink_data          (pcp_0_flash_bridge_agent_cp_data),                    //          .data
		.sink_startofpacket (pcp_0_flash_bridge_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pcp_0_flash_bridge_agent_cp_endofpacket),             //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (91),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_BURST_TYPE_H          (88),
		.PKT_BURST_TYPE_L          (87),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (71),
		.OUT_BURSTWRAP_H           (83),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_100_outclk0_clk),                                        //       clk.clk
		.reset              (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (openmac_0_dma_cmd_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (openmac_0_dma_cmd_width_adapter_src_channel),                //          .channel
		.sink_data          (openmac_0_dma_cmd_width_adapter_src_data),                   //          .data
		.sink_startofpacket (openmac_0_dma_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (openmac_0_dma_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (openmac_0_dma_cmd_width_adapter_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (clk_100_outclk0_clk),                                        //       clk.clk
		.reset              (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                       //      sink.ready
		.sink_channel       (router_001_src_channel),                                     //          .channel
		.sink_data          (router_001_src_data),                                        //          .data
		.sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_001_src_valid),                                       //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_002 (
		.clk                (clk_100_outclk0_clk),                                        //       clk.clk
		.reset              (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                       //      sink.ready
		.sink_channel       (router_002_src_channel),                                     //          .channel
		.sink_data          (router_002_src_data),                                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                                       //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_003_src0_data),                             //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                 //          .channel
		.sink0_data          (crosser_out_data),                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                             //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                               //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                               //          .valid
		.sink1_channel       (crosser_001_out_channel),                             //          .channel
		.sink1_data          (crosser_001_out_data),                                //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                         //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                               //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                               //          .valid
		.sink2_channel       (crosser_002_out_channel),                             //          .channel
		.sink2_data          (crosser_002_out_data),                                //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                       //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket),                         //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                            //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                            //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                          //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                             //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                          //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                //          .valid
		.src2_data          (rsp_demux_src2_data),                                 //          .data
		.src2_channel       (rsp_demux_src2_channel),                              //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                          //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                //          .valid
		.src3_data          (rsp_demux_src3_data),                                 //          .data
		.src3_channel       (rsp_demux_src3_channel),                              //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                        //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_100_outclk0_clk),                                        //       clk.clk
		.reset               (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                      //          .valid
		.sink0_channel       (crosser_003_out_channel),                                    //          .channel
		.sink0_data          (crosser_003_out_data),                                       //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (clk_100_outclk0_clk),                                        //       clk.clk
		.reset               (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                      //          .valid
		.src_data            (rsp_mux_001_src_data),                                       //          .data
		.src_channel         (rsp_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                      //          .valid
		.sink0_channel       (crosser_004_out_channel),                                    //          .channel
		.sink0_data          (crosser_004_out_data),                                       //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_002 (
		.clk                 (clk_100_outclk0_clk),                                        //       clk.clk
		.reset               (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                      //          .valid
		.src_data            (rsp_mux_002_src_data),                                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                      //          .valid
		.sink0_channel       (crosser_005_out_channel),                                    //          .channel
		.sink0_data          (crosser_005_out_data),                                       //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_50_clk_clk),                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                               //          .valid
		.src_data            (rsp_mux_003_src_data),                                //          .data
		.src_channel         (rsp_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                                //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                              //          .channel
		.sink0_data          (rsp_demux_src3_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (68),
		.OUT_PKT_BURST_SIZE_L          (66),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (70),
		.OUT_PKT_BURST_TYPE_L          (69),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) openmac_0_dma_rsp_width_adapter (
		.clk                  (clk_100_outclk0_clk),                                        //       clk.clk
		.reset                (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                          //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                        //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                          //          .ready
		.in_data              (rsp_mux_src_data),                                           //          .data
		.out_endofpacket      (openmac_0_dma_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (openmac_0_dma_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (openmac_0_dma_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (openmac_0_dma_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (openmac_0_dma_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (openmac_0_dma_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_BURSTWRAP_H            (65),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (68),
		.IN_PKT_BURST_SIZE_L           (66),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (70),
		.IN_PKT_BURST_TYPE_L           (69),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) openmac_0_dma_cmd_width_adapter (
		.clk                  (clk_100_outclk0_clk),                                        //       clk.clk
		.reset                (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_src_valid),                                           //      sink.valid
		.in_channel           (router_src_channel),                                         //          .channel
		.in_startofpacket     (router_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_src_ready),                                           //          .ready
		.in_data              (router_src_data),                                            //          .data
		.out_endofpacket      (openmac_0_dma_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (openmac_0_dma_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (openmac_0_dma_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (openmac_0_dma_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (openmac_0_dma_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (openmac_0_dma_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_100_outclk0_clk),                                        //        in_clk.clk
		.in_reset          (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                             //       out_clk.clk
		.out_reset         (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                       //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                       //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                     //              .channel
		.in_data           (cmd_demux_src0_data),                                        //              .data
		.out_ready         (crosser_out_ready),                                          //           out.ready
		.out_valid         (crosser_out_valid),                                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                    //              .endofpacket
		.out_channel       (crosser_out_channel),                                        //              .channel
		.out_data          (crosser_out_data),                                           //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_100_outclk0_clk),                                        //        in_clk.clk
		.in_reset          (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                             //       out_clk.clk
		.out_reset         (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_001_src0_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                      //           out.ready
		.out_valid         (crosser_001_out_valid),                                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                    //              .channel
		.out_data          (crosser_001_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_100_outclk0_clk),                                        //        in_clk.clk
		.in_reset          (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                             //       out_clk.clk
		.out_reset         (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_002_src0_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                      //           out.ready
		.out_valid         (crosser_002_out_valid),                                      //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                    //              .channel
		.out_data          (crosser_002_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                                             //        in_clk.clk
		.in_reset          (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (clk_100_outclk0_clk),                                        //       out_clk.clk
		.out_reset         (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                       //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                       //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                     //              .channel
		.in_data           (rsp_demux_src0_data),                                        //              .data
		.out_ready         (crosser_003_out_ready),                                      //           out.ready
		.out_valid         (crosser_003_out_valid),                                      //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                    //              .channel
		.out_data          (crosser_003_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_50_clk_clk),                                             //        in_clk.clk
		.in_reset          (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (clk_100_outclk0_clk),                                        //       out_clk.clk
		.out_reset         (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                       //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                       //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                     //              .channel
		.in_data           (rsp_demux_src1_data),                                        //              .data
		.out_ready         (crosser_004_out_ready),                                      //           out.ready
		.out_valid         (crosser_004_out_valid),                                      //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                    //              .channel
		.out_data          (crosser_004_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                                             //        in_clk.clk
		.in_reset          (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (clk_100_outclk0_clk),                                        //       out_clk.clk
		.out_reset         (openmac_0_dma_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                       //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                       //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                     //              .channel
		.in_data           (rsp_demux_src2_data),                                        //              .data
		.out_ready         (crosser_005_out_ready),                                      //           out.ready
		.out_valid         (crosser_005_out_valid),                                      //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                    //              .channel
		.out_data          (crosser_005_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

endmodule
