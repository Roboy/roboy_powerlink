// soc_system_pcp_0_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2018.02.08.18:46:23

`timescale 1 ps / 1 ps
module soc_system_pcp_0_mm_interconnect_3 (
		input  wire        clk50_clk_clk,                                 //                               clk50_clk.clk
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset, // mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [19:0] mm_bridge_0_m0_address,                        //                          mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                    //                                        .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                     //                                        .burstcount
		input  wire [3:0]  mm_bridge_0_m0_byteenable,                     //                                        .byteenable
		input  wire        mm_bridge_0_m0_read,                           //                                        .read
		output wire [31:0] mm_bridge_0_m0_readdata,                       //                                        .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                  //                                        .readdatavalid
		input  wire        mm_bridge_0_m0_write,                          //                                        .write
		input  wire [31:0] mm_bridge_0_m0_writedata,                      //                                        .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                    //                                        .debugaccess
		output wire [2:0]  benchmark_pio_s1_address,                      //                        benchmark_pio_s1.address
		output wire        benchmark_pio_s1_write,                        //                                        .write
		input  wire [31:0] benchmark_pio_s1_readdata,                     //                                        .readdata
		output wire [31:0] benchmark_pio_s1_writedata,                    //                                        .writedata
		output wire        benchmark_pio_s1_chipselect,                   //                                        .chipselect
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,         //           jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,           //                                        .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,            //                                        .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,        //                                        .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,       //                                        .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,     //                                        .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,      //                                        .chipselect
		output wire [2:0]  POWERLINK_LED_s1_address,                      //                        POWERLINK_LED_s1.address
		output wire        POWERLINK_LED_s1_write,                        //                                        .write
		input  wire [31:0] POWERLINK_LED_s1_readdata,                     //                                        .readdata
		output wire [31:0] POWERLINK_LED_s1_writedata,                    //                                        .writedata
		output wire        POWERLINK_LED_s1_chipselect,                   //                                        .chipselect
		output wire [18:0] slow_bridge_s0_address,                        //                          slow_bridge_s0.address
		output wire        slow_bridge_s0_write,                          //                                        .write
		output wire        slow_bridge_s0_read,                           //                                        .read
		input  wire [31:0] slow_bridge_s0_readdata,                       //                                        .readdata
		output wire [31:0] slow_bridge_s0_writedata,                      //                                        .writedata
		output wire [0:0]  slow_bridge_s0_burstcount,                     //                                        .burstcount
		output wire [3:0]  slow_bridge_s0_byteenable,                     //                                        .byteenable
		input  wire        slow_bridge_s0_readdatavalid,                  //                                        .readdatavalid
		input  wire        slow_bridge_s0_waitrequest,                    //                                        .waitrequest
		output wire        slow_bridge_s0_debugaccess,                    //                                        .debugaccess
		output wire [2:0]  timer_0_s1_address,                            //                              timer_0_s1.address
		output wire        timer_0_s1_write,                              //                                        .write
		input  wire [15:0] timer_0_s1_readdata,                           //                                        .readdata
		output wire [15:0] timer_0_s1_writedata,                          //                                        .writedata
		output wire        timer_0_s1_chipselect                          //                                        .chipselect
	);

	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire  [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire  [19:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire  [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire   [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                 // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                  // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire  [19:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_write;                      // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_read;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                   // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;              // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                 // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;         // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [94:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;               // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;      // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [94:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;            // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire  [93:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire   [4:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_ready;                                                 // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire         slow_bridge_s0_agent_m0_waitrequest;                               // slow_bridge_s0_translator:uav_waitrequest -> slow_bridge_s0_agent:m0_waitrequest
	wire   [2:0] slow_bridge_s0_agent_m0_burstcount;                                // slow_bridge_s0_agent:m0_burstcount -> slow_bridge_s0_translator:uav_burstcount
	wire  [31:0] slow_bridge_s0_agent_m0_writedata;                                 // slow_bridge_s0_agent:m0_writedata -> slow_bridge_s0_translator:uav_writedata
	wire  [19:0] slow_bridge_s0_agent_m0_address;                                   // slow_bridge_s0_agent:m0_address -> slow_bridge_s0_translator:uav_address
	wire         slow_bridge_s0_agent_m0_write;                                     // slow_bridge_s0_agent:m0_write -> slow_bridge_s0_translator:uav_write
	wire         slow_bridge_s0_agent_m0_lock;                                      // slow_bridge_s0_agent:m0_lock -> slow_bridge_s0_translator:uav_lock
	wire         slow_bridge_s0_agent_m0_read;                                      // slow_bridge_s0_agent:m0_read -> slow_bridge_s0_translator:uav_read
	wire  [31:0] slow_bridge_s0_agent_m0_readdata;                                  // slow_bridge_s0_translator:uav_readdata -> slow_bridge_s0_agent:m0_readdata
	wire         slow_bridge_s0_agent_m0_readdatavalid;                             // slow_bridge_s0_translator:uav_readdatavalid -> slow_bridge_s0_agent:m0_readdatavalid
	wire         slow_bridge_s0_agent_m0_debugaccess;                               // slow_bridge_s0_agent:m0_debugaccess -> slow_bridge_s0_translator:uav_debugaccess
	wire   [3:0] slow_bridge_s0_agent_m0_byteenable;                                // slow_bridge_s0_agent:m0_byteenable -> slow_bridge_s0_translator:uav_byteenable
	wire         slow_bridge_s0_agent_rf_source_endofpacket;                        // slow_bridge_s0_agent:rf_source_endofpacket -> slow_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire         slow_bridge_s0_agent_rf_source_valid;                              // slow_bridge_s0_agent:rf_source_valid -> slow_bridge_s0_agent_rsp_fifo:in_valid
	wire         slow_bridge_s0_agent_rf_source_startofpacket;                      // slow_bridge_s0_agent:rf_source_startofpacket -> slow_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire  [94:0] slow_bridge_s0_agent_rf_source_data;                               // slow_bridge_s0_agent:rf_source_data -> slow_bridge_s0_agent_rsp_fifo:in_data
	wire         slow_bridge_s0_agent_rf_source_ready;                              // slow_bridge_s0_agent_rsp_fifo:in_ready -> slow_bridge_s0_agent:rf_source_ready
	wire         slow_bridge_s0_agent_rsp_fifo_out_endofpacket;                     // slow_bridge_s0_agent_rsp_fifo:out_endofpacket -> slow_bridge_s0_agent:rf_sink_endofpacket
	wire         slow_bridge_s0_agent_rsp_fifo_out_valid;                           // slow_bridge_s0_agent_rsp_fifo:out_valid -> slow_bridge_s0_agent:rf_sink_valid
	wire         slow_bridge_s0_agent_rsp_fifo_out_startofpacket;                   // slow_bridge_s0_agent_rsp_fifo:out_startofpacket -> slow_bridge_s0_agent:rf_sink_startofpacket
	wire  [94:0] slow_bridge_s0_agent_rsp_fifo_out_data;                            // slow_bridge_s0_agent_rsp_fifo:out_data -> slow_bridge_s0_agent:rf_sink_data
	wire         slow_bridge_s0_agent_rsp_fifo_out_ready;                           // slow_bridge_s0_agent:rf_sink_ready -> slow_bridge_s0_agent_rsp_fifo:out_ready
	wire         slow_bridge_s0_agent_rdata_fifo_src_valid;                         // slow_bridge_s0_agent:rdata_fifo_src_valid -> slow_bridge_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] slow_bridge_s0_agent_rdata_fifo_src_data;                          // slow_bridge_s0_agent:rdata_fifo_src_data -> slow_bridge_s0_agent:rdata_fifo_sink_data
	wire         slow_bridge_s0_agent_rdata_fifo_src_ready;                         // slow_bridge_s0_agent:rdata_fifo_sink_ready -> slow_bridge_s0_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                       // cmd_mux_001:src_endofpacket -> slow_bridge_s0_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                             // cmd_mux_001:src_valid -> slow_bridge_s0_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                     // cmd_mux_001:src_startofpacket -> slow_bridge_s0_agent:cp_startofpacket
	wire  [93:0] cmd_mux_001_src_data;                                              // cmd_mux_001:src_data -> slow_bridge_s0_agent:cp_data
	wire   [4:0] cmd_mux_001_src_channel;                                           // cmd_mux_001:src_channel -> slow_bridge_s0_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                             // slow_bridge_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire         powerlink_led_s1_agent_m0_waitrequest;                             // POWERLINK_LED_s1_translator:uav_waitrequest -> POWERLINK_LED_s1_agent:m0_waitrequest
	wire   [2:0] powerlink_led_s1_agent_m0_burstcount;                              // POWERLINK_LED_s1_agent:m0_burstcount -> POWERLINK_LED_s1_translator:uav_burstcount
	wire  [31:0] powerlink_led_s1_agent_m0_writedata;                               // POWERLINK_LED_s1_agent:m0_writedata -> POWERLINK_LED_s1_translator:uav_writedata
	wire  [19:0] powerlink_led_s1_agent_m0_address;                                 // POWERLINK_LED_s1_agent:m0_address -> POWERLINK_LED_s1_translator:uav_address
	wire         powerlink_led_s1_agent_m0_write;                                   // POWERLINK_LED_s1_agent:m0_write -> POWERLINK_LED_s1_translator:uav_write
	wire         powerlink_led_s1_agent_m0_lock;                                    // POWERLINK_LED_s1_agent:m0_lock -> POWERLINK_LED_s1_translator:uav_lock
	wire         powerlink_led_s1_agent_m0_read;                                    // POWERLINK_LED_s1_agent:m0_read -> POWERLINK_LED_s1_translator:uav_read
	wire  [31:0] powerlink_led_s1_agent_m0_readdata;                                // POWERLINK_LED_s1_translator:uav_readdata -> POWERLINK_LED_s1_agent:m0_readdata
	wire         powerlink_led_s1_agent_m0_readdatavalid;                           // POWERLINK_LED_s1_translator:uav_readdatavalid -> POWERLINK_LED_s1_agent:m0_readdatavalid
	wire         powerlink_led_s1_agent_m0_debugaccess;                             // POWERLINK_LED_s1_agent:m0_debugaccess -> POWERLINK_LED_s1_translator:uav_debugaccess
	wire   [3:0] powerlink_led_s1_agent_m0_byteenable;                              // POWERLINK_LED_s1_agent:m0_byteenable -> POWERLINK_LED_s1_translator:uav_byteenable
	wire         powerlink_led_s1_agent_rf_source_endofpacket;                      // POWERLINK_LED_s1_agent:rf_source_endofpacket -> POWERLINK_LED_s1_agent_rsp_fifo:in_endofpacket
	wire         powerlink_led_s1_agent_rf_source_valid;                            // POWERLINK_LED_s1_agent:rf_source_valid -> POWERLINK_LED_s1_agent_rsp_fifo:in_valid
	wire         powerlink_led_s1_agent_rf_source_startofpacket;                    // POWERLINK_LED_s1_agent:rf_source_startofpacket -> POWERLINK_LED_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] powerlink_led_s1_agent_rf_source_data;                             // POWERLINK_LED_s1_agent:rf_source_data -> POWERLINK_LED_s1_agent_rsp_fifo:in_data
	wire         powerlink_led_s1_agent_rf_source_ready;                            // POWERLINK_LED_s1_agent_rsp_fifo:in_ready -> POWERLINK_LED_s1_agent:rf_source_ready
	wire         powerlink_led_s1_agent_rsp_fifo_out_endofpacket;                   // POWERLINK_LED_s1_agent_rsp_fifo:out_endofpacket -> POWERLINK_LED_s1_agent:rf_sink_endofpacket
	wire         powerlink_led_s1_agent_rsp_fifo_out_valid;                         // POWERLINK_LED_s1_agent_rsp_fifo:out_valid -> POWERLINK_LED_s1_agent:rf_sink_valid
	wire         powerlink_led_s1_agent_rsp_fifo_out_startofpacket;                 // POWERLINK_LED_s1_agent_rsp_fifo:out_startofpacket -> POWERLINK_LED_s1_agent:rf_sink_startofpacket
	wire  [94:0] powerlink_led_s1_agent_rsp_fifo_out_data;                          // POWERLINK_LED_s1_agent_rsp_fifo:out_data -> POWERLINK_LED_s1_agent:rf_sink_data
	wire         powerlink_led_s1_agent_rsp_fifo_out_ready;                         // POWERLINK_LED_s1_agent:rf_sink_ready -> POWERLINK_LED_s1_agent_rsp_fifo:out_ready
	wire         powerlink_led_s1_agent_rdata_fifo_src_valid;                       // POWERLINK_LED_s1_agent:rdata_fifo_src_valid -> POWERLINK_LED_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] powerlink_led_s1_agent_rdata_fifo_src_data;                        // POWERLINK_LED_s1_agent:rdata_fifo_src_data -> POWERLINK_LED_s1_agent:rdata_fifo_sink_data
	wire         powerlink_led_s1_agent_rdata_fifo_src_ready;                       // POWERLINK_LED_s1_agent:rdata_fifo_sink_ready -> POWERLINK_LED_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_endofpacket;                                       // cmd_mux_002:src_endofpacket -> POWERLINK_LED_s1_agent:cp_endofpacket
	wire         cmd_mux_002_src_valid;                                             // cmd_mux_002:src_valid -> POWERLINK_LED_s1_agent:cp_valid
	wire         cmd_mux_002_src_startofpacket;                                     // cmd_mux_002:src_startofpacket -> POWERLINK_LED_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_002_src_data;                                              // cmd_mux_002:src_data -> POWERLINK_LED_s1_agent:cp_data
	wire   [4:0] cmd_mux_002_src_channel;                                           // cmd_mux_002:src_channel -> POWERLINK_LED_s1_agent:cp_channel
	wire         cmd_mux_002_src_ready;                                             // POWERLINK_LED_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire         benchmark_pio_s1_agent_m0_waitrequest;                             // benchmark_pio_s1_translator:uav_waitrequest -> benchmark_pio_s1_agent:m0_waitrequest
	wire   [2:0] benchmark_pio_s1_agent_m0_burstcount;                              // benchmark_pio_s1_agent:m0_burstcount -> benchmark_pio_s1_translator:uav_burstcount
	wire  [31:0] benchmark_pio_s1_agent_m0_writedata;                               // benchmark_pio_s1_agent:m0_writedata -> benchmark_pio_s1_translator:uav_writedata
	wire  [19:0] benchmark_pio_s1_agent_m0_address;                                 // benchmark_pio_s1_agent:m0_address -> benchmark_pio_s1_translator:uav_address
	wire         benchmark_pio_s1_agent_m0_write;                                   // benchmark_pio_s1_agent:m0_write -> benchmark_pio_s1_translator:uav_write
	wire         benchmark_pio_s1_agent_m0_lock;                                    // benchmark_pio_s1_agent:m0_lock -> benchmark_pio_s1_translator:uav_lock
	wire         benchmark_pio_s1_agent_m0_read;                                    // benchmark_pio_s1_agent:m0_read -> benchmark_pio_s1_translator:uav_read
	wire  [31:0] benchmark_pio_s1_agent_m0_readdata;                                // benchmark_pio_s1_translator:uav_readdata -> benchmark_pio_s1_agent:m0_readdata
	wire         benchmark_pio_s1_agent_m0_readdatavalid;                           // benchmark_pio_s1_translator:uav_readdatavalid -> benchmark_pio_s1_agent:m0_readdatavalid
	wire         benchmark_pio_s1_agent_m0_debugaccess;                             // benchmark_pio_s1_agent:m0_debugaccess -> benchmark_pio_s1_translator:uav_debugaccess
	wire   [3:0] benchmark_pio_s1_agent_m0_byteenable;                              // benchmark_pio_s1_agent:m0_byteenable -> benchmark_pio_s1_translator:uav_byteenable
	wire         benchmark_pio_s1_agent_rf_source_endofpacket;                      // benchmark_pio_s1_agent:rf_source_endofpacket -> benchmark_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         benchmark_pio_s1_agent_rf_source_valid;                            // benchmark_pio_s1_agent:rf_source_valid -> benchmark_pio_s1_agent_rsp_fifo:in_valid
	wire         benchmark_pio_s1_agent_rf_source_startofpacket;                    // benchmark_pio_s1_agent:rf_source_startofpacket -> benchmark_pio_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] benchmark_pio_s1_agent_rf_source_data;                             // benchmark_pio_s1_agent:rf_source_data -> benchmark_pio_s1_agent_rsp_fifo:in_data
	wire         benchmark_pio_s1_agent_rf_source_ready;                            // benchmark_pio_s1_agent_rsp_fifo:in_ready -> benchmark_pio_s1_agent:rf_source_ready
	wire         benchmark_pio_s1_agent_rsp_fifo_out_endofpacket;                   // benchmark_pio_s1_agent_rsp_fifo:out_endofpacket -> benchmark_pio_s1_agent:rf_sink_endofpacket
	wire         benchmark_pio_s1_agent_rsp_fifo_out_valid;                         // benchmark_pio_s1_agent_rsp_fifo:out_valid -> benchmark_pio_s1_agent:rf_sink_valid
	wire         benchmark_pio_s1_agent_rsp_fifo_out_startofpacket;                 // benchmark_pio_s1_agent_rsp_fifo:out_startofpacket -> benchmark_pio_s1_agent:rf_sink_startofpacket
	wire  [94:0] benchmark_pio_s1_agent_rsp_fifo_out_data;                          // benchmark_pio_s1_agent_rsp_fifo:out_data -> benchmark_pio_s1_agent:rf_sink_data
	wire         benchmark_pio_s1_agent_rsp_fifo_out_ready;                         // benchmark_pio_s1_agent:rf_sink_ready -> benchmark_pio_s1_agent_rsp_fifo:out_ready
	wire         benchmark_pio_s1_agent_rdata_fifo_src_valid;                       // benchmark_pio_s1_agent:rdata_fifo_src_valid -> benchmark_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] benchmark_pio_s1_agent_rdata_fifo_src_data;                        // benchmark_pio_s1_agent:rdata_fifo_src_data -> benchmark_pio_s1_agent:rdata_fifo_sink_data
	wire         benchmark_pio_s1_agent_rdata_fifo_src_ready;                       // benchmark_pio_s1_agent:rdata_fifo_sink_ready -> benchmark_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_endofpacket;                                       // cmd_mux_003:src_endofpacket -> benchmark_pio_s1_agent:cp_endofpacket
	wire         cmd_mux_003_src_valid;                                             // cmd_mux_003:src_valid -> benchmark_pio_s1_agent:cp_valid
	wire         cmd_mux_003_src_startofpacket;                                     // cmd_mux_003:src_startofpacket -> benchmark_pio_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_003_src_data;                                              // cmd_mux_003:src_data -> benchmark_pio_s1_agent:cp_data
	wire   [4:0] cmd_mux_003_src_channel;                                           // cmd_mux_003:src_channel -> benchmark_pio_s1_agent:cp_channel
	wire         cmd_mux_003_src_ready;                                             // benchmark_pio_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire         timer_0_s1_agent_m0_waitrequest;                                   // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire   [2:0] timer_0_s1_agent_m0_burstcount;                                    // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire  [31:0] timer_0_s1_agent_m0_writedata;                                     // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire  [19:0] timer_0_s1_agent_m0_address;                                       // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire         timer_0_s1_agent_m0_write;                                         // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire         timer_0_s1_agent_m0_lock;                                          // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire         timer_0_s1_agent_m0_read;                                          // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire  [31:0] timer_0_s1_agent_m0_readdata;                                      // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire         timer_0_s1_agent_m0_readdatavalid;                                 // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire         timer_0_s1_agent_m0_debugaccess;                                   // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [3:0] timer_0_s1_agent_m0_byteenable;                                    // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire         timer_0_s1_agent_rf_source_endofpacket;                            // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_0_s1_agent_rf_source_valid;                                  // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire         timer_0_s1_agent_rf_source_startofpacket;                          // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] timer_0_s1_agent_rf_source_data;                                   // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire         timer_0_s1_agent_rf_source_ready;                                  // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire         timer_0_s1_agent_rsp_fifo_out_endofpacket;                         // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_valid;                               // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire         timer_0_s1_agent_rsp_fifo_out_startofpacket;                       // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire  [94:0] timer_0_s1_agent_rsp_fifo_out_data;                                // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire         timer_0_s1_agent_rsp_fifo_out_ready;                               // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire         timer_0_s1_agent_rdata_fifo_src_valid;                             // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] timer_0_s1_agent_rdata_fifo_src_data;                              // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire         timer_0_s1_agent_rdata_fifo_src_ready;                             // timer_0_s1_agent:rdata_fifo_sink_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_endofpacket;                                       // cmd_mux_004:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                             // cmd_mux_004:src_valid -> timer_0_s1_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                     // cmd_mux_004:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_004_src_data;                                              // cmd_mux_004:src_data -> timer_0_s1_agent:cp_data
	wire   [4:0] cmd_mux_004_src_channel;                                           // cmd_mux_004:src_channel -> timer_0_s1_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                             // timer_0_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire         mm_bridge_0_m0_agent_cp_endofpacket;                               // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         mm_bridge_0_m0_agent_cp_valid;                                     // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire         mm_bridge_0_m0_agent_cp_startofpacket;                             // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [93:0] mm_bridge_0_m0_agent_cp_data;                                      // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire         mm_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                      // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_001:sink_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;              // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [93:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                       // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_001:sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                      // router_001:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire         router_001_src_endofpacket;                                        // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_001_src_valid;                                              // router_001:src_valid -> rsp_demux:sink_valid
	wire         router_001_src_startofpacket;                                      // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [93:0] router_001_src_data;                                               // router_001:src_data -> rsp_demux:sink_data
	wire   [4:0] router_001_src_channel;                                            // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_ready;                                              // rsp_demux:sink_ready -> router_001:src_ready
	wire         slow_bridge_s0_agent_rp_endofpacket;                               // slow_bridge_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         slow_bridge_s0_agent_rp_valid;                                     // slow_bridge_s0_agent:rp_valid -> router_002:sink_valid
	wire         slow_bridge_s0_agent_rp_startofpacket;                             // slow_bridge_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [93:0] slow_bridge_s0_agent_rp_data;                                      // slow_bridge_s0_agent:rp_data -> router_002:sink_data
	wire         slow_bridge_s0_agent_rp_ready;                                     // router_002:sink_ready -> slow_bridge_s0_agent:rp_ready
	wire         router_002_src_endofpacket;                                        // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_002_src_valid;                                              // router_002:src_valid -> rsp_demux_001:sink_valid
	wire         router_002_src_startofpacket;                                      // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [93:0] router_002_src_data;                                               // router_002:src_data -> rsp_demux_001:sink_data
	wire   [4:0] router_002_src_channel;                                            // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_ready;                                              // rsp_demux_001:sink_ready -> router_002:src_ready
	wire         powerlink_led_s1_agent_rp_endofpacket;                             // POWERLINK_LED_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         powerlink_led_s1_agent_rp_valid;                                   // POWERLINK_LED_s1_agent:rp_valid -> router_003:sink_valid
	wire         powerlink_led_s1_agent_rp_startofpacket;                           // POWERLINK_LED_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [93:0] powerlink_led_s1_agent_rp_data;                                    // POWERLINK_LED_s1_agent:rp_data -> router_003:sink_data
	wire         powerlink_led_s1_agent_rp_ready;                                   // router_003:sink_ready -> POWERLINK_LED_s1_agent:rp_ready
	wire         router_003_src_endofpacket;                                        // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_003_src_valid;                                              // router_003:src_valid -> rsp_demux_002:sink_valid
	wire         router_003_src_startofpacket;                                      // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [93:0] router_003_src_data;                                               // router_003:src_data -> rsp_demux_002:sink_data
	wire   [4:0] router_003_src_channel;                                            // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_ready;                                              // rsp_demux_002:sink_ready -> router_003:src_ready
	wire         benchmark_pio_s1_agent_rp_endofpacket;                             // benchmark_pio_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         benchmark_pio_s1_agent_rp_valid;                                   // benchmark_pio_s1_agent:rp_valid -> router_004:sink_valid
	wire         benchmark_pio_s1_agent_rp_startofpacket;                           // benchmark_pio_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [93:0] benchmark_pio_s1_agent_rp_data;                                    // benchmark_pio_s1_agent:rp_data -> router_004:sink_data
	wire         benchmark_pio_s1_agent_rp_ready;                                   // router_004:sink_ready -> benchmark_pio_s1_agent:rp_ready
	wire         router_004_src_endofpacket;                                        // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_004_src_valid;                                              // router_004:src_valid -> rsp_demux_003:sink_valid
	wire         router_004_src_startofpacket;                                      // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [93:0] router_004_src_data;                                               // router_004:src_data -> rsp_demux_003:sink_data
	wire   [4:0] router_004_src_channel;                                            // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_ready;                                              // rsp_demux_003:sink_ready -> router_004:src_ready
	wire         timer_0_s1_agent_rp_endofpacket;                                   // timer_0_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         timer_0_s1_agent_rp_valid;                                         // timer_0_s1_agent:rp_valid -> router_005:sink_valid
	wire         timer_0_s1_agent_rp_startofpacket;                                 // timer_0_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [93:0] timer_0_s1_agent_rp_data;                                          // timer_0_s1_agent:rp_data -> router_005:sink_data
	wire         timer_0_s1_agent_rp_ready;                                         // router_005:sink_ready -> timer_0_s1_agent:rp_ready
	wire         router_005_src_endofpacket;                                        // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_005_src_valid;                                              // router_005:src_valid -> rsp_demux_004:sink_valid
	wire         router_005_src_startofpacket;                                      // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [93:0] router_005_src_data;                                               // router_005:src_data -> rsp_demux_004:sink_data
	wire   [4:0] router_005_src_channel;                                            // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_ready;                                              // rsp_demux_004:sink_ready -> router_005:src_ready
	wire         router_src_endofpacket;                                            // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire         router_src_valid;                                                  // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire         router_src_startofpacket;                                          // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire  [93:0] router_src_data;                                                   // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire   [4:0] router_src_channel;                                                // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire         router_src_ready;                                                  // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire         mm_bridge_0_m0_limiter_cmd_src_endofpacket;                        // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         mm_bridge_0_m0_limiter_cmd_src_startofpacket;                      // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [93:0] mm_bridge_0_m0_limiter_cmd_src_data;                               // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire   [4:0] mm_bridge_0_m0_limiter_cmd_src_channel;                            // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire         rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire         rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire         rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire  [93:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire   [4:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_ready;                                                 // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire         mm_bridge_0_m0_limiter_rsp_src_endofpacket;                        // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire         mm_bridge_0_m0_limiter_rsp_src_valid;                              // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire         mm_bridge_0_m0_limiter_rsp_src_startofpacket;                      // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire  [93:0] mm_bridge_0_m0_limiter_rsp_src_data;                               // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire   [4:0] mm_bridge_0_m0_limiter_rsp_src_channel;                            // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire         mm_bridge_0_m0_limiter_rsp_src_ready;                              // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire         cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [93:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [4:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [93:0] cmd_demux_src1_data;                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [4:0] cmd_demux_src1_channel;                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_src2_endofpacket;                                        // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                              // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_src2_startofpacket;                                      // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [93:0] cmd_demux_src2_data;                                               // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire   [4:0] cmd_demux_src2_channel;                                            // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_ready;                                              // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire         cmd_demux_src3_endofpacket;                                        // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                              // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_src3_startofpacket;                                      // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [93:0] cmd_demux_src3_data;                                               // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire   [4:0] cmd_demux_src3_channel;                                            // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_ready;                                              // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire         cmd_demux_src4_endofpacket;                                        // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                              // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire         cmd_demux_src4_startofpacket;                                      // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [93:0] cmd_demux_src4_data;                                               // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire   [4:0] cmd_demux_src4_channel;                                            // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_ready;                                              // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire         rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [93:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [4:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_001_src0_endofpacket;                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [93:0] rsp_demux_001_src0_data;                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [4:0] rsp_demux_001_src0_channel;                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_002_src0_endofpacket;                                    // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src0_valid;                                          // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire         rsp_demux_002_src0_startofpacket;                                  // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [93:0] rsp_demux_002_src0_data;                                           // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire   [4:0] rsp_demux_002_src0_channel;                                        // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_ready;                                          // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                    // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_003_src0_valid;                                          // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire         rsp_demux_003_src0_startofpacket;                                  // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [93:0] rsp_demux_003_src0_data;                                           // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire   [4:0] rsp_demux_003_src0_channel;                                        // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_ready;                                          // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_004_src0_endofpacket;                                    // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_004_src0_valid;                                          // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire         rsp_demux_004_src0_startofpacket;                                  // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [93:0] rsp_demux_004_src0_data;                                           // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire   [4:0] rsp_demux_004_src0_channel;                                        // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_ready;                                          // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [4:0] mm_bridge_0_m0_limiter_cmd_valid_data;                             // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                      (clk50_clk_clk),                                                     //                       clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address              (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                      (clk50_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slow_bridge_s0_translator (
		.clk                      (clk50_clk_clk),                                 //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (slow_bridge_s0_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (slow_bridge_s0_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (slow_bridge_s0_agent_m0_read),                  //                         .read
		.uav_write                (slow_bridge_s0_agent_m0_write),                 //                         .write
		.uav_waitrequest          (slow_bridge_s0_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (slow_bridge_s0_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (slow_bridge_s0_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (slow_bridge_s0_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (slow_bridge_s0_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (slow_bridge_s0_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (slow_bridge_s0_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (slow_bridge_s0_address),                        //      avalon_anti_slave_0.address
		.av_write                 (slow_bridge_s0_write),                          //                         .write
		.av_read                  (slow_bridge_s0_read),                           //                         .read
		.av_readdata              (slow_bridge_s0_readdata),                       //                         .readdata
		.av_writedata             (slow_bridge_s0_writedata),                      //                         .writedata
		.av_burstcount            (slow_bridge_s0_burstcount),                     //                         .burstcount
		.av_byteenable            (slow_bridge_s0_byteenable),                     //                         .byteenable
		.av_readdatavalid         (slow_bridge_s0_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (slow_bridge_s0_waitrequest),                    //                         .waitrequest
		.av_debugaccess           (slow_bridge_s0_debugaccess),                    //                         .debugaccess
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_chipselect            (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) powerlink_led_s1_translator (
		.clk                      (clk50_clk_clk),                                 //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (powerlink_led_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (powerlink_led_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (powerlink_led_s1_agent_m0_read),                //                         .read
		.uav_write                (powerlink_led_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (powerlink_led_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (powerlink_led_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (powerlink_led_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (powerlink_led_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (powerlink_led_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (powerlink_led_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (powerlink_led_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (POWERLINK_LED_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (POWERLINK_LED_s1_write),                        //                         .write
		.av_readdata              (POWERLINK_LED_s1_readdata),                     //                         .readdata
		.av_writedata             (POWERLINK_LED_s1_writedata),                    //                         .writedata
		.av_chipselect            (POWERLINK_LED_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) benchmark_pio_s1_translator (
		.clk                      (clk50_clk_clk),                                 //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (benchmark_pio_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (benchmark_pio_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (benchmark_pio_s1_agent_m0_read),                //                         .read
		.uav_write                (benchmark_pio_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (benchmark_pio_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (benchmark_pio_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (benchmark_pio_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (benchmark_pio_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (benchmark_pio_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (benchmark_pio_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (benchmark_pio_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (benchmark_pio_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (benchmark_pio_s1_write),                        //                         .write
		.av_readdata              (benchmark_pio_s1_readdata),                     //                         .readdata
		.av_writedata             (benchmark_pio_s1_writedata),                    //                         .writedata
		.av_chipselect            (benchmark_pio_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                      (clk50_clk_clk),                                 //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (timer_0_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (timer_0_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (timer_0_s1_agent_m0_read),                      //                         .read
		.uav_write                (timer_0_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (timer_0_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (timer_0_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (timer_0_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (timer_0_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (timer_0_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (timer_0_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (timer_0_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (timer_0_s1_write),                              //                         .write
		.av_readdata              (timer_0_s1_readdata),                           //                         .readdata
		.av_writedata             (timer_0_s1_writedata),                          //                         .writedata
		.av_chipselect            (timer_0_s1_chipselect),                         //                         .chipselect
		.av_read                  (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                     (clk50_clk_clk),                                                     //       clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address              (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid                (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                  // (terminated)
		.av_writeresponserequest (1'b0),                                                              // (terminated)
		.av_writeresponsevalid   ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponserequest (),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                                  //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) slow_bridge_s0_agent (
		.clk                     (clk50_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (slow_bridge_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (slow_bridge_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (slow_bridge_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (slow_bridge_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (slow_bridge_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (slow_bridge_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (slow_bridge_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (slow_bridge_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (slow_bridge_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (slow_bridge_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (slow_bridge_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (slow_bridge_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (slow_bridge_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (slow_bridge_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (slow_bridge_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (slow_bridge_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_001_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                         //                .channel
		.rf_sink_ready           (slow_bridge_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (slow_bridge_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (slow_bridge_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (slow_bridge_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (slow_bridge_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (slow_bridge_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (slow_bridge_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (slow_bridge_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (slow_bridge_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (slow_bridge_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (slow_bridge_s0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (slow_bridge_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (slow_bridge_s0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (slow_bridge_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slow_bridge_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (slow_bridge_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slow_bridge_s0_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (slow_bridge_s0_agent_rf_source_data),             //        in.data
		.in_valid          (slow_bridge_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (slow_bridge_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slow_bridge_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slow_bridge_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slow_bridge_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slow_bridge_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slow_bridge_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slow_bridge_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slow_bridge_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) powerlink_led_s1_agent (
		.clk                     (clk50_clk_clk),                                     //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (powerlink_led_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (powerlink_led_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (powerlink_led_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (powerlink_led_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (powerlink_led_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (powerlink_led_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (powerlink_led_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (powerlink_led_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (powerlink_led_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (powerlink_led_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (powerlink_led_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (powerlink_led_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (powerlink_led_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (powerlink_led_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (powerlink_led_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (powerlink_led_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_002_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                           //                .channel
		.rf_sink_ready           (powerlink_led_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (powerlink_led_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (powerlink_led_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (powerlink_led_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (powerlink_led_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (powerlink_led_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (powerlink_led_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (powerlink_led_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (powerlink_led_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (powerlink_led_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (powerlink_led_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (powerlink_led_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (powerlink_led_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (powerlink_led_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (powerlink_led_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (powerlink_led_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) powerlink_led_s1_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                     //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (powerlink_led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (powerlink_led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (powerlink_led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (powerlink_led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (powerlink_led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (powerlink_led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (powerlink_led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (powerlink_led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (powerlink_led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (powerlink_led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) benchmark_pio_s1_agent (
		.clk                     (clk50_clk_clk),                                     //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (benchmark_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (benchmark_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (benchmark_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (benchmark_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (benchmark_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (benchmark_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (benchmark_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (benchmark_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (benchmark_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (benchmark_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (benchmark_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (benchmark_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (benchmark_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (benchmark_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (benchmark_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (benchmark_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_003_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                           //                .channel
		.rf_sink_ready           (benchmark_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (benchmark_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (benchmark_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (benchmark_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (benchmark_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (benchmark_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (benchmark_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (benchmark_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (benchmark_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (benchmark_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (benchmark_pio_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (benchmark_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (benchmark_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (benchmark_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (benchmark_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (benchmark_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) benchmark_pio_s1_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                     //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (benchmark_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (benchmark_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (benchmark_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (benchmark_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (benchmark_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (benchmark_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (benchmark_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (benchmark_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (benchmark_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (benchmark_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) timer_0_s1_agent (
		.clk                     (clk50_clk_clk),                                 //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                       //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (timer_0_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (timer_0_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (timer_0_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk50_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),               //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	soc_system_pcp_0_mm_interconnect_3_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk50_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_router_001 router_002 (
		.sink_ready         (slow_bridge_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (slow_bridge_s0_agent_rp_valid),                 //          .valid
		.sink_data          (slow_bridge_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (slow_bridge_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (slow_bridge_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_router_001 router_003 (
		.sink_ready         (powerlink_led_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (powerlink_led_s1_agent_rp_valid),               //          .valid
		.sink_data          (powerlink_led_s1_agent_rp_data),                //          .data
		.sink_startofpacket (powerlink_led_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (powerlink_led_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_router_001 router_004 (
		.sink_ready         (benchmark_pio_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (benchmark_pio_s1_agent_rp_valid),               //          .valid
		.sink_data          (benchmark_pio_s1_agent_rp_data),                //          .data
		.sink_startofpacket (benchmark_pio_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (benchmark_pio_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_router_001 router_005 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                     //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clk50_clk_clk),                                 //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	soc_system_pcp_0_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (clk50_clk_clk),                                 //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //           .valid
		.src2_data          (cmd_demux_src2_data),                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                          //           .valid
		.src3_data          (cmd_demux_src3_data),                           //           .data
		.src3_channel       (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                          //           .valid
		.src4_data          (cmd_demux_src4_data),                           //           .data
		.src4_channel       (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                     //           .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clk50_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (clk50_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_cmd_mux cmd_mux_002 (
		.clk                 (clk50_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_cmd_mux cmd_mux_003 (
		.clk                 (clk50_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_cmd_mux cmd_mux_004 (
		.clk                 (clk50_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                          //      sink.ready
		.sink_channel       (router_001_src_channel),                        //          .channel
		.sink_data          (router_001_src_data),                           //          .data
		.sink_startofpacket (router_001_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_001_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_rsp_demux rsp_demux_001 (
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_rsp_demux rsp_demux_002 (
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_rsp_demux rsp_demux_003 (
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_rsp_demux rsp_demux_004 (
		.clk                (clk50_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_pcp_0_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (clk50_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                          //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                        //          .channel
		.sink0_data          (rsp_demux_src0_data),                           //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                       //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                       //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                       //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                 //          .endofpacket
	);

endmodule
